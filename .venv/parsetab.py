
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSASSIGN COLON COMMA DIVIDE ELSE EQ GE GT ID IF LAMBDA LBRACE LE LPAREN LT MINUS NUMBER PLUS PRINT RBRACE RETURN RPAREN SEMI TIMES ZAPprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : expression_statement\n                 | print_statement\n                 | if_statement\n                 | assignment_statement\n                 | function_definition\n                 | return_statementfunction_definition : ZAP ID LPAREN param_list RPAREN LBRACE statement_list RBRACEparam_list : ID\n                  | param_list COMMA ID\n                  | emptyreturn_statement : RETURN expression SEMIprint_statement : PRINT expression SEMIif_statement : IF expression LBRACE statement_list RBRACE\n                    | IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEassignment_statement : ID ASSIGN expression SEMIexpression_statement : expression SEMIexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDexpression : MINUS expression %prec UMINUSexpression : ID LPAREN arg_list RPARENarg_list : expression\n                | arg_list COMMA expression\n                | emptyempty :'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,19,20,48,49,56,57,58,64,69,71,72,73,74,75,],[11,11,-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,11,-14,11,-18,-16,11,11,11,11,-10,-17,]),'IF':([0,2,3,4,5,6,7,8,9,19,20,48,49,56,57,58,64,69,71,72,73,74,75,],[12,12,-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,12,-14,12,-18,-16,12,12,12,12,-10,-17,]),'ID':([0,2,3,4,5,6,7,8,9,11,12,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,33,34,48,49,54,56,57,58,60,64,67,69,71,72,73,74,75,],[13,13,-2,-4,-5,-6,-7,-8,-9,31,31,35,31,31,31,-3,-19,31,31,31,31,31,31,31,31,31,31,31,-15,13,61,-14,13,-18,31,-16,70,13,13,13,13,-10,-17,]),'ZAP':([0,2,3,4,5,6,7,8,9,19,20,48,49,56,57,58,64,69,71,72,73,74,75,],[14,14,-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,14,-14,14,-18,-16,14,14,14,14,-10,-17,]),'RETURN':([0,2,3,4,5,6,7,8,9,19,20,48,49,56,57,58,64,69,71,72,73,74,75,],[16,16,-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,16,-14,16,-18,-16,16,16,16,16,-10,-17,]),'LPAREN':([0,2,3,4,5,6,7,8,9,11,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,31,33,34,35,48,49,56,57,58,60,64,69,71,72,73,74,75,],[15,15,-2,-4,-5,-6,-7,-8,-9,15,15,34,15,15,15,-3,-19,15,15,15,15,15,15,15,15,15,34,15,15,54,-15,15,-14,15,-18,15,-16,15,15,15,15,-10,-17,]),'NUMBER':([0,2,3,4,5,6,7,8,9,11,12,15,16,17,19,20,21,22,23,24,25,26,27,28,29,33,34,48,49,56,57,58,60,64,69,71,72,73,74,75,],[18,18,-2,-4,-5,-6,-7,-8,-9,18,18,18,18,18,-3,-19,18,18,18,18,18,18,18,18,18,18,18,-15,18,-14,18,-18,18,-16,18,18,18,18,-10,-17,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,55,56,57,58,59,60,64,65,69,71,72,73,74,75,],[17,17,-2,-4,-5,-6,-7,-8,-9,22,17,17,-31,17,17,17,-30,-3,-19,17,17,17,17,17,17,17,17,17,22,-31,22,17,17,22,22,-32,-20,-21,-22,-23,22,22,22,22,22,-15,17,22,22,-29,-14,17,-18,-33,17,-16,22,17,17,17,17,-10,-17,]),'$end':([1,2,3,4,5,6,7,8,9,19,20,48,56,58,64,74,75,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,-14,-18,-16,-10,-17,]),'RBRACE':([3,4,5,6,7,8,9,19,20,48,56,57,58,64,72,73,74,75,],[-2,-4,-5,-6,-7,-8,-9,-3,-19,-15,-14,64,-18,-16,74,75,-10,-17,]),'SEMI':([10,13,18,30,31,37,38,39,40,41,42,43,44,45,46,47,50,55,59,],[20,-31,-30,48,-31,56,-32,-20,-21,-22,-23,-24,-25,-26,-27,-28,58,-29,-33,]),'PLUS':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[21,-31,-30,21,-31,21,21,21,-32,-20,-21,-22,-23,21,21,21,21,21,21,21,-29,-33,21,]),'TIMES':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[23,-31,-30,23,-31,23,23,23,-32,23,23,-22,-23,23,23,23,23,23,23,23,-29,-33,23,]),'DIVIDE':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[24,-31,-30,24,-31,24,24,24,-32,24,24,-22,-23,24,24,24,24,24,24,24,-29,-33,24,]),'GT':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[25,-31,-30,25,-31,25,25,25,-32,-20,-21,-22,-23,25,25,25,25,25,25,25,-29,-33,25,]),'LT':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[26,-31,-30,26,-31,26,26,26,-32,-20,-21,-22,-23,26,26,26,26,26,26,26,-29,-33,26,]),'GE':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[27,-31,-30,27,-31,27,27,27,-32,-20,-21,-22,-23,27,27,27,27,27,27,27,-29,-33,27,]),'LE':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[28,-31,-30,28,-31,28,28,28,-32,-20,-21,-22,-23,28,28,28,28,28,28,28,-29,-33,28,]),'EQ':([10,13,18,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,55,59,65,],[29,-31,-30,29,-31,29,29,29,-32,-20,-21,-22,-23,29,29,29,29,29,29,29,-29,-33,29,]),'ASSIGN':([13,],[33,]),'LBRACE':([18,31,32,38,39,40,41,42,43,44,45,46,47,55,59,66,68,],[-30,-31,49,-32,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-33,69,71,]),'RPAREN':([18,31,34,36,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,59,61,62,63,65,70,],[-30,-31,-37,55,-32,-20,-21,-22,-23,-24,-25,-26,-27,-28,59,-34,-36,-37,-29,-33,-11,66,-13,-35,-12,]),'COMMA':([18,31,34,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,59,61,62,63,65,70,],[-30,-31,-37,-32,-20,-21,-22,-23,-24,-25,-26,-27,-28,60,-34,-36,-37,-29,-33,-11,67,-13,-35,-12,]),'ELSE':([64,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,49,69,71,],[2,57,72,73,]),'statement':([0,2,49,57,69,71,72,73,],[3,19,3,19,3,3,19,19,]),'expression_statement':([0,2,49,57,69,71,72,73,],[4,4,4,4,4,4,4,4,]),'print_statement':([0,2,49,57,69,71,72,73,],[5,5,5,5,5,5,5,5,]),'if_statement':([0,2,49,57,69,71,72,73,],[6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,49,57,69,71,72,73,],[7,7,7,7,7,7,7,7,]),'function_definition':([0,2,49,57,69,71,72,73,],[8,8,8,8,8,8,8,8,]),'return_statement':([0,2,49,57,69,71,72,73,],[9,9,9,9,9,9,9,9,]),'expression':([0,2,11,12,15,16,17,21,22,23,24,25,26,27,28,29,33,34,49,57,60,69,71,72,73,],[10,10,30,32,36,37,38,39,40,41,42,43,44,45,46,47,50,52,10,10,65,10,10,10,10,]),'arg_list':([34,],[51,]),'empty':([34,54,],[53,63,]),'param_list':([54,],[62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',12),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',17),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',28),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',29),
  ('function_definition -> ZAP ID LPAREN param_list RPAREN LBRACE statement_list RBRACE','function_definition',8,'p_function_definition','parser.py',33),
  ('param_list -> ID','param_list',1,'p_param_list','parser.py',37),
  ('param_list -> param_list COMMA ID','param_list',3,'p_param_list','parser.py',38),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',39),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','parser.py',49),
  ('print_statement -> PRINT expression SEMI','print_statement',3,'p_print_statement','parser.py',53),
  ('if_statement -> IF expression LBRACE statement_list RBRACE','if_statement',5,'p_if_statement','parser.py',57),
  ('if_statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',9,'p_if_statement','parser.py',58),
  ('assignment_statement -> ID ASSIGN expression SEMI','assignment_statement',4,'p_assignment_statement','parser.py',65),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','parser.py',69),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',73),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',74),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',75),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',76),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',77),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',78),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',79),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',80),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',81),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',85),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',89),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',93),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',97),
  ('expression -> ID LPAREN arg_list RPAREN','expression',4,'p_expression_function_call','parser.py',101),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',105),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',106),
  ('arg_list -> empty','arg_list',1,'p_arg_list','parser.py',107),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',117),
]
