
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTLTGELEleftPLUSMINUSleftTIMESDIVIDEMODULOrightNOTrightUMINUSAND ASSIGN COLON COMMA COMMENT DIVIDE ELSE ELSEIF EQ FALSE GE GT IDENTIFIER IF LAMBDA LBRACE LE LPAREN LT MINUS MODULO NEQ NOT NUMBER OR PLUS PRINT RBRACE RETURN RPAREN SEMICOLON TIMES TRUE ZAPprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : assignment_statement\n                 | print_statement\n                 | if_statement\n                 | function_definition\n                 | return_statement\n                 | expression_statement\n                 | lambda_expressionassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONprint_statement : PRINT LPAREN expression RPAREN SEMICOLONif_statement : IF LPAREN expression RPAREN block elseif_list else_blockelseif_list : elseif\n                   | elseif_list elseif\n                   | emptyelseif : ELSEIF LPAREN expression RPAREN blockelse_block : ELSE block\n                  | emptyblock : LBRACE statement_list RBRACEfunction_definition : ZAP IDENTIFIER LPAREN parameter_list RPAREN blockparameter_list : IDENTIFIER\n                      | parameter_list COMMA IDENTIFIER\n                      | emptyreturn_statement : RETURN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : NUMBER\n                  | IDENTIFIER\n                  | TRUE\n                  | FALSE\n                  | LPAREN expression RPAREN\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NEQ expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression %prec NOT\n                  | MINUS expression %prec UMINUS\n                  | function_call\n                  | anonymous_function\n                  | lambda_call\n                  | emptyargument_list : expression\n                     | argument_list COMMA expression\n                     | emptylambda_expression : IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE SEMICOLONanonymous_function : LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACElambda_call : IDENTIFIER LBRACE argument_list RBRACEfunction_call : IDENTIFIER LPAREN argument_list RPARENempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,14,16,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,77,78,82,83,85,91,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[11,11,-2,-4,-5,-6,-7,-8,-9,-10,48,50,48,48,48,-3,48,48,48,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,80,80,-25,-11,80,48,99,-12,-58,11,-58,-14,-16,11,-21,48,-13,-15,-19,48,-20,48,-18,-17,-54,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,28,32,78,82,94,95,96,101,102,103,105,106,109,110,112,114,117,123,124,],[13,13,-2,-4,-5,-6,-7,-8,-9,-10,-3,-26,-25,-11,-12,-58,13,-58,-14,-16,13,-21,-13,-15,-19,-20,-18,-17,-54,]),'IF':([0,2,3,4,5,6,7,8,9,10,28,32,78,82,94,95,96,101,102,103,105,106,109,110,112,114,117,123,124,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-3,-26,-25,-11,-12,-58,15,-58,-14,-16,15,-21,-13,-15,-19,-20,-18,-17,-54,]),'ZAP':([0,2,3,4,5,6,7,8,9,10,28,32,78,82,94,95,96,101,102,103,105,106,109,110,112,114,117,123,124,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-3,-26,-25,-11,-12,-58,16,-58,-14,-16,16,-21,-13,-15,-19,-20,-18,-17,-54,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,28,32,78,82,94,95,96,101,102,103,105,106,109,110,112,114,117,123,124,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-3,-26,-25,-11,-12,-58,17,-58,-14,-16,17,-21,-13,-15,-19,-20,-18,-17,-54,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,14,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,78,82,85,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,-3,19,19,19,-26,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-25,-11,19,-12,-58,19,-58,-14,-16,19,-21,19,-13,-15,-19,19,-20,19,-18,-17,-54,]),'TRUE':([0,2,3,4,5,6,7,8,9,10,14,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,78,82,85,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,-3,20,20,20,-26,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-25,-11,20,-12,-58,20,-58,-14,-16,20,-21,20,-13,-15,-19,20,-20,20,-18,-17,-54,]),'FALSE':([0,2,3,4,5,6,7,8,9,10,14,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,78,82,85,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,21,21,21,21,-3,21,21,21,-26,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-25,-11,21,-12,-58,21,-58,-14,-16,21,-21,21,-13,-15,-19,21,-20,21,-18,-17,-54,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,17,18,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,56,78,82,85,94,95,96,101,102,103,104,105,106,107,109,110,112,113,114,116,117,123,124,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,30,46,14,49,14,52,14,14,-3,14,14,14,-26,14,14,14,14,14,14,14,14,14,14,14,14,14,14,30,14,77,83,-25,-11,14,-12,-58,14,-58,-14,-16,113,14,-21,14,-13,-15,-19,14,-20,14,-18,-17,-54,]),'NOT':([0,2,3,4,5,6,7,8,9,10,14,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,78,82,85,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,23,23,23,23,-3,23,23,23,-26,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-25,-11,23,-12,-58,23,-58,-14,-16,23,-21,23,-13,-15,-19,23,-20,23,-18,-17,-54,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-28,34,22,22,-27,-29,-30,22,22,-47,-48,-49,-50,-3,22,22,22,-26,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,-28,22,34,-46,-45,34,34,-50,-32,-33,-34,-35,-36,34,34,34,34,34,34,34,34,34,-31,34,-25,-11,-57,22,-56,34,-12,-58,22,-58,-14,-16,22,-21,22,-13,-15,-19,22,-20,34,22,-18,34,-55,34,-55,-17,-54,]),'LAMBDA':([0,2,3,4,5,6,7,8,9,10,14,17,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,78,82,85,94,95,96,101,102,103,105,106,107,109,110,112,113,114,116,117,123,124,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,-3,56,18,18,-26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-25,-11,18,-12,-58,18,-58,-14,-16,18,-21,18,-13,-15,-19,18,-20,18,-18,-17,-54,]),'SEMICOLON':([0,2,3,4,5,6,7,8,9,10,11,12,17,19,20,21,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,51,53,54,55,61,62,63,64,65,66,67,68,69,70,71,72,73,75,78,82,84,86,87,94,95,96,101,102,103,105,106,109,110,112,114,117,119,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,32,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-28,78,-46,-45,82,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-31,-25,-11,-57,-56,94,-12,-58,-58,-58,-14,-16,-58,-21,-13,-15,-19,-20,-18,-55,124,-17,-54,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,33,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,33,-28,-58,33,-46,-45,33,33,-50,-32,-33,-34,-35,-36,33,33,33,33,33,33,33,33,33,-31,33,-25,-11,-57,-58,-56,33,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,33,-58,-18,33,-55,33,-55,-17,-54,]),'TIMES':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,35,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,35,-28,-58,35,-46,-45,35,35,-50,35,35,-34,-35,-36,35,35,35,35,35,35,35,35,35,-31,35,-25,-11,-57,-58,-56,35,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,35,-58,-18,35,-55,35,-55,-17,-54,]),'DIVIDE':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,36,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,36,-28,-58,36,-46,-45,36,36,-50,36,36,-34,-35,-36,36,36,36,36,36,36,36,36,36,-31,36,-25,-11,-57,-58,-56,36,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,36,-58,-18,36,-55,36,-55,-17,-54,]),'MODULO':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,37,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,37,-28,-58,37,-46,-45,37,37,-50,37,37,-34,-35,-36,37,37,37,37,37,37,37,37,37,-31,37,-25,-11,-57,-58,-56,37,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,37,-58,-18,37,-55,37,-55,-17,-54,]),'GT':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,38,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,38,-28,-58,38,-46,-45,38,38,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,38,38,38,38,38,-31,38,-25,-11,-57,-58,-56,38,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,38,-58,-18,38,-55,38,-55,-17,-54,]),'LT':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,39,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,39,-28,-58,39,-46,-45,39,39,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,39,39,39,39,39,-31,39,-25,-11,-57,-58,-56,39,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,39,-58,-18,39,-55,39,-55,-17,-54,]),'GE':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,40,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,40,-28,-58,40,-46,-45,40,40,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,40,40,40,40,40,-31,40,-25,-11,-57,-58,-56,40,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,40,-58,-18,40,-55,40,-55,-17,-54,]),'LE':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,41,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,41,-28,-58,41,-46,-45,41,41,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,41,41,41,41,41,-31,41,-25,-11,-57,-58,-56,41,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,41,-58,-18,41,-55,41,-55,-17,-54,]),'EQ':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,42,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,42,-28,-58,42,-46,-45,42,42,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,42,42,42,-31,42,-25,-11,-57,-58,-56,42,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,42,-58,-18,42,-55,42,-55,-17,-54,]),'NEQ':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,43,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,43,-28,-58,43,-46,-45,43,43,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,43,43,43,-31,43,-25,-11,-57,-58,-56,43,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,43,-58,-18,43,-55,43,-55,-17,-54,]),'AND':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,44,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,44,-28,-58,44,-46,-45,44,44,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,44,44,-31,44,-25,-11,-57,-58,-56,44,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,44,-58,-18,44,-55,44,-55,-17,-54,]),'OR':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,82,84,85,86,93,94,95,96,101,102,103,105,106,107,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-58,-58,-2,-4,-5,-6,-7,-8,-9,-10,-28,45,-58,-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-58,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,45,-28,-58,45,-46,-45,45,45,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,45,-31,45,-25,-11,-57,-58,-56,45,-12,-58,-58,-58,-14,-16,-58,-21,-58,-13,-15,-19,-58,-20,45,-58,-18,45,-55,45,-55,-17,-54,]),'$end':([1,2,3,4,5,6,7,8,9,10,28,32,78,82,94,95,101,102,103,106,109,110,112,114,117,123,124,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-3,-26,-25,-11,-12,-58,-58,-14,-16,-21,-13,-15,-19,-20,-18,-17,-54,]),'RBRACE':([3,4,5,6,7,8,9,10,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,78,82,84,85,86,93,94,95,101,102,103,105,106,107,109,110,112,114,115,116,117,119,120,123,124,],[-2,-4,-5,-6,-7,-8,-9,-10,-27,-29,-30,-58,-58,-47,-48,-49,-50,-3,-58,-26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-28,-46,-45,-51,-50,86,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-31,-25,-11,-57,-58,-56,-52,-12,-58,-58,-14,-16,114,-21,-58,-13,-15,-19,-20,119,-58,-18,-55,122,-17,-54,]),'ASSIGN':([11,],[29,]),'LBRACE':([11,48,88,97,98,108,111,121,],[31,31,96,96,107,116,96,96,]),'RPAREN':([14,19,20,21,22,23,24,25,26,27,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,84,85,86,89,92,93,99,113,118,119,],[-58,-27,-29,-30,-58,-58,-47,-48,-49,-50,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,75,-28,-58,-58,-46,-45,84,-51,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,87,-31,88,-58,90,-22,-24,-58,-57,-58,-56,97,100,-52,-23,-58,121,-55,]),'COMMA':([19,20,21,22,23,24,25,26,27,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,79,80,81,83,84,85,86,89,92,93,99,119,],[-27,-29,-30,-58,-58,-47,-48,-49,-50,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-28,-58,-46,-45,85,-51,-50,85,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-31,-58,91,-22,-24,-58,-57,-58,-56,91,91,-52,-23,-55,]),'COLON':([90,100,],[98,108,]),'ELSEIF':([95,101,102,103,110,114,123,],[104,104,-14,-16,-15,-20,-17,]),'ELSE':([95,101,102,103,110,114,123,],[-58,111,-14,-16,-15,-20,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,96,],[2,105,]),'statement':([0,2,96,105,],[3,28,3,28,]),'assignment_statement':([0,2,96,105,],[4,4,4,4,]),'print_statement':([0,2,96,105,],[5,5,5,5,]),'if_statement':([0,2,96,105,],[6,6,6,6,]),'function_definition':([0,2,96,105,],[7,7,7,7,]),'return_statement':([0,2,96,105,],[8,8,8,8,]),'expression_statement':([0,2,96,105,],[9,9,9,9,]),'lambda_expression':([0,2,96,105,],[10,10,10,10,]),'expression':([0,2,14,17,22,23,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,85,96,105,107,113,116,],[12,12,47,51,53,54,55,58,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,93,12,12,115,118,120,]),'function_call':([0,2,14,17,22,23,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,85,96,105,107,113,116,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'anonymous_function':([0,2,14,17,22,23,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,85,96,105,107,113,116,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'lambda_call':([0,2,14,17,22,23,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,85,96,105,107,113,116,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'empty':([0,2,14,17,22,23,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,77,83,85,95,96,101,105,107,113,116,],[27,27,27,27,27,27,27,59,59,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,81,81,81,27,103,27,112,27,27,27,27,]),'argument_list':([30,31,],[57,60,]),'parameter_list':([52,77,83,],[79,89,92,]),'block':([88,97,111,121,],[95,106,117,123,]),'elseif_list':([95,],[101,]),'elseif':([95,101,],[102,110,]),'else_block':([101,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',16),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',20),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',21),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',28),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',29),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',30),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',31),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> lambda_expression','statement',1,'p_statement','parser.py',34),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',38),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',42),
  ('if_statement -> IF LPAREN expression RPAREN block elseif_list else_block','if_statement',7,'p_if_statement','parser.py',46),
  ('elseif_list -> elseif','elseif_list',1,'p_elseif_list','parser.py',50),
  ('elseif_list -> elseif_list elseif','elseif_list',2,'p_elseif_list','parser.py',51),
  ('elseif_list -> empty','elseif_list',1,'p_elseif_list','parser.py',52),
  ('elseif -> ELSEIF LPAREN expression RPAREN block','elseif',5,'p_elseif','parser.py',59),
  ('else_block -> ELSE block','else_block',2,'p_else_block','parser.py',63),
  ('else_block -> empty','else_block',1,'p_else_block','parser.py',64),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',68),
  ('function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block','function_definition',6,'p_function_definition','parser.py',72),
  ('parameter_list -> IDENTIFIER','parameter_list',1,'p_parameter_list','parser.py',76),
  ('parameter_list -> parameter_list COMMA IDENTIFIER','parameter_list',3,'p_parameter_list','parser.py',77),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser.py',78),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',85),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',89),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',93),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',94),
  ('expression -> TRUE','expression',1,'p_expression','parser.py',95),
  ('expression -> FALSE','expression',1,'p_expression','parser.py',96),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',97),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',98),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',99),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',100),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',101),
  ('expression -> expression MODULO expression','expression',3,'p_expression','parser.py',102),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',103),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',104),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',105),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',106),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',107),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',108),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',109),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',110),
  ('expression -> NOT expression','expression',2,'p_expression','parser.py',111),
  ('expression -> MINUS expression','expression',2,'p_expression','parser.py',112),
  ('expression -> function_call','expression',1,'p_expression','parser.py',113),
  ('expression -> anonymous_function','expression',1,'p_expression','parser.py',114),
  ('expression -> lambda_call','expression',1,'p_expression','parser.py',115),
  ('expression -> empty','expression',1,'p_expression','parser.py',116),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',128),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',129),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',130),
  ('lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE SEMICOLON','lambda_expression',11,'p_lambda_expression','parser.py',137),
  ('anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE','anonymous_function',8,'p_anonymous_function','parser.py',141),
  ('lambda_call -> IDENTIFIER LBRACE argument_list RBRACE','lambda_call',4,'p_lambda_call','parser.py',145),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',149),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',153),
]
