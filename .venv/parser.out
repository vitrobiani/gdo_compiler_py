Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_definition
Rule 8     statement -> return_statement
Rule 9     statement -> expression_statement
Rule 10    statement -> lambda_expression
Rule 11    statement -> comment
Rule 12    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 13    print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON
Rule 14    print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON
Rule 15    print_statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 16    print_statement -> PRINT LPAREN empty SEMICOLON
Rule 17    if_statement -> IF LPAREN expression RPAREN block elseif_list else_block
Rule 18    elseif_list -> elseif_list elseif
Rule 19    elseif_list -> empty
Rule 20    elseif -> ELSEIF LPAREN expression RPAREN block
Rule 21    else_block -> ELSE block
Rule 22    else_block -> empty
Rule 23    block -> LBRACE statement_list RBRACE
Rule 24    function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block
Rule 25    parameter_list -> IDENTIFIER
Rule 26    parameter_list -> parameter_list COMMA IDENTIFIER
Rule 27    parameter_list -> empty
Rule 28    return_statement -> RETURN expression SEMICOLON
Rule 29    return_statement -> RETURN empty SEMICOLON
Rule 30    expression_statement -> expression SEMICOLON
Rule 31    expression -> NUMBER
Rule 32    expression -> IDENTIFIER
Rule 33    expression -> TRUE
Rule 34    expression -> FALSE
Rule 35    expression -> LPAREN expression RPAREN
Rule 36    expression -> expression PLUS expression
Rule 37    expression -> expression MINUS expression
Rule 38    expression -> expression TIMES expression
Rule 39    expression -> expression DIVIDE expression
Rule 40    expression -> expression MODULO expression
Rule 41    expression -> expression GT expression
Rule 42    expression -> expression LT expression
Rule 43    expression -> expression GE expression
Rule 44    expression -> expression LE expression
Rule 45    expression -> expression EQ expression
Rule 46    expression -> expression NEQ expression
Rule 47    expression -> expression AND expression
Rule 48    expression -> expression OR expression
Rule 49    expression -> NOT expression
Rule 50    expression -> MINUS expression
Rule 51    expression -> function_call
Rule 52    argument_list -> expression
Rule 53    argument_list -> argument_list COMMA expression
Rule 54    argument_list -> empty
Rule 55    lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON
Rule 56    anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
Rule 57    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 58    empty -> <empty>
Rule 59    comment -> COMMENT IDENTIFIER

Terminals, with rules where they appear

AND                  : 47
ASSIGN               : 12 55
COLON                : 56
COMMA                : 26 53
COMMENT              : 59
DIVIDE               : 39
ELSE                 : 21
ELSEIF               : 20
EQ                   : 45
FALSE                : 34
GE                   : 43
GT                   : 41
IDENTIFIER           : 12 24 25 26 32 55 57 59
IF                   : 17
LAMBDA               : 56
LBRACE               : 23 56
LE                   : 44
LPAREN               : 13 14 15 16 17 20 24 35 56 57
LT                   : 42
MINUS                : 37 50
MODULO               : 40
NEQ                  : 46
NOT                  : 49
NUMBER               : 31
OR                   : 48
PLUS                 : 36
PRINT                : 15 16
PRINTLN              : 13 14
RBRACE               : 23 56
RETURN               : 28 29
RPAREN               : 13 14 15 17 20 24 35 56 57
SEMICOLON            : 12 13 14 15 16 28 29 30 55
TIMES                : 38
TRUE                 : 33
ZAP                  : 24
error                : 

Nonterminals, with rules where they appear

anonymous_function   : 55
argument_list        : 53 57
assignment_statement : 4
block                : 17 20 21 24
comment              : 11
else_block           : 17
elseif               : 18
elseif_list          : 17 18
empty                : 14 16 19 22 27 29 54
expression           : 12 13 15 17 20 28 30 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 52 53 56
expression_statement : 9
function_call        : 51
function_definition  : 7
if_statement         : 6
lambda_expression    : 10
parameter_list       : 24 26 56
print_statement      : 5
program              : 0
return_statement     : 8
statement            : 2 3
statement_list       : 1 3 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINTLN LPAREN expression RPAREN SEMICOLON
    (14) print_statement -> . PRINTLN LPAREN empty RPAREN SEMICOLON
    (15) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (16) print_statement -> . PRINT LPAREN empty SEMICOLON
    (17) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (24) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (28) return_statement -> . RETURN expression SEMICOLON
    (29) return_statement -> . RETURN empty SEMICOLON
    (30) expression_statement -> . expression SEMICOLON
    (55) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (59) comment -> . COMMENT IDENTIFIER
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    IDENTIFIER      shift and go to state 12
    PRINTLN         shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    ZAP             shift and go to state 18
    RETURN          shift and go to state 19
    COMMENT         shift and go to state 20
    NUMBER          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINTLN LPAREN expression RPAREN SEMICOLON
    (14) print_statement -> . PRINTLN LPAREN empty RPAREN SEMICOLON
    (15) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (16) print_statement -> . PRINT LPAREN empty SEMICOLON
    (17) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (24) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (28) return_statement -> . RETURN expression SEMICOLON
    (29) return_statement -> . RETURN empty SEMICOLON
    (30) expression_statement -> . expression SEMICOLON
    (55) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (59) comment -> . COMMENT IDENTIFIER
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 12
    PRINTLN         shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    ZAP             shift and go to state 18
    RETURN          shift and go to state 19
    COMMENT         shift and go to state 20
    NUMBER          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    statement                      shift and go to state 27
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 26

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    PRINTLN         reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    ZAP             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    COMMENT         reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    NOT             reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment_statement .

    IDENTIFIER      reduce using rule 4 (statement -> assignment_statement .)
    PRINTLN         reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    ZAP             reduce using rule 4 (statement -> assignment_statement .)
    RETURN          reduce using rule 4 (statement -> assignment_statement .)
    COMMENT         reduce using rule 4 (statement -> assignment_statement .)
    NUMBER          reduce using rule 4 (statement -> assignment_statement .)
    TRUE            reduce using rule 4 (statement -> assignment_statement .)
    FALSE           reduce using rule 4 (statement -> assignment_statement .)
    LPAREN          reduce using rule 4 (statement -> assignment_statement .)
    NOT             reduce using rule 4 (statement -> assignment_statement .)
    MINUS           reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACE          reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINTLN         reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    ZAP             reduce using rule 5 (statement -> print_statement .)
    RETURN          reduce using rule 5 (statement -> print_statement .)
    COMMENT         reduce using rule 5 (statement -> print_statement .)
    NUMBER          reduce using rule 5 (statement -> print_statement .)
    TRUE            reduce using rule 5 (statement -> print_statement .)
    FALSE           reduce using rule 5 (statement -> print_statement .)
    LPAREN          reduce using rule 5 (statement -> print_statement .)
    NOT             reduce using rule 5 (statement -> print_statement .)
    MINUS           reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINTLN         reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    ZAP             reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    COMMENT         reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_definition .

    IDENTIFIER      reduce using rule 7 (statement -> function_definition .)
    PRINTLN         reduce using rule 7 (statement -> function_definition .)
    PRINT           reduce using rule 7 (statement -> function_definition .)
    IF              reduce using rule 7 (statement -> function_definition .)
    ZAP             reduce using rule 7 (statement -> function_definition .)
    RETURN          reduce using rule 7 (statement -> function_definition .)
    COMMENT         reduce using rule 7 (statement -> function_definition .)
    NUMBER          reduce using rule 7 (statement -> function_definition .)
    TRUE            reduce using rule 7 (statement -> function_definition .)
    FALSE           reduce using rule 7 (statement -> function_definition .)
    LPAREN          reduce using rule 7 (statement -> function_definition .)
    NOT             reduce using rule 7 (statement -> function_definition .)
    MINUS           reduce using rule 7 (statement -> function_definition .)
    $end            reduce using rule 7 (statement -> function_definition .)
    RBRACE          reduce using rule 7 (statement -> function_definition .)


state 8

    (8) statement -> return_statement .

    IDENTIFIER      reduce using rule 8 (statement -> return_statement .)
    PRINTLN         reduce using rule 8 (statement -> return_statement .)
    PRINT           reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    ZAP             reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    COMMENT         reduce using rule 8 (statement -> return_statement .)
    NUMBER          reduce using rule 8 (statement -> return_statement .)
    TRUE            reduce using rule 8 (statement -> return_statement .)
    FALSE           reduce using rule 8 (statement -> return_statement .)
    LPAREN          reduce using rule 8 (statement -> return_statement .)
    NOT             reduce using rule 8 (statement -> return_statement .)
    MINUS           reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> expression_statement .

    IDENTIFIER      reduce using rule 9 (statement -> expression_statement .)
    PRINTLN         reduce using rule 9 (statement -> expression_statement .)
    PRINT           reduce using rule 9 (statement -> expression_statement .)
    IF              reduce using rule 9 (statement -> expression_statement .)
    ZAP             reduce using rule 9 (statement -> expression_statement .)
    RETURN          reduce using rule 9 (statement -> expression_statement .)
    COMMENT         reduce using rule 9 (statement -> expression_statement .)
    NUMBER          reduce using rule 9 (statement -> expression_statement .)
    TRUE            reduce using rule 9 (statement -> expression_statement .)
    FALSE           reduce using rule 9 (statement -> expression_statement .)
    LPAREN          reduce using rule 9 (statement -> expression_statement .)
    NOT             reduce using rule 9 (statement -> expression_statement .)
    MINUS           reduce using rule 9 (statement -> expression_statement .)
    $end            reduce using rule 9 (statement -> expression_statement .)
    RBRACE          reduce using rule 9 (statement -> expression_statement .)


state 10

    (10) statement -> lambda_expression .

    IDENTIFIER      reduce using rule 10 (statement -> lambda_expression .)
    PRINTLN         reduce using rule 10 (statement -> lambda_expression .)
    PRINT           reduce using rule 10 (statement -> lambda_expression .)
    IF              reduce using rule 10 (statement -> lambda_expression .)
    ZAP             reduce using rule 10 (statement -> lambda_expression .)
    RETURN          reduce using rule 10 (statement -> lambda_expression .)
    COMMENT         reduce using rule 10 (statement -> lambda_expression .)
    NUMBER          reduce using rule 10 (statement -> lambda_expression .)
    TRUE            reduce using rule 10 (statement -> lambda_expression .)
    FALSE           reduce using rule 10 (statement -> lambda_expression .)
    LPAREN          reduce using rule 10 (statement -> lambda_expression .)
    NOT             reduce using rule 10 (statement -> lambda_expression .)
    MINUS           reduce using rule 10 (statement -> lambda_expression .)
    $end            reduce using rule 10 (statement -> lambda_expression .)
    RBRACE          reduce using rule 10 (statement -> lambda_expression .)


state 11

    (11) statement -> comment .

    IDENTIFIER      reduce using rule 11 (statement -> comment .)
    PRINTLN         reduce using rule 11 (statement -> comment .)
    PRINT           reduce using rule 11 (statement -> comment .)
    IF              reduce using rule 11 (statement -> comment .)
    ZAP             reduce using rule 11 (statement -> comment .)
    RETURN          reduce using rule 11 (statement -> comment .)
    COMMENT         reduce using rule 11 (statement -> comment .)
    NUMBER          reduce using rule 11 (statement -> comment .)
    TRUE            reduce using rule 11 (statement -> comment .)
    FALSE           reduce using rule 11 (statement -> comment .)
    LPAREN          reduce using rule 11 (statement -> comment .)
    NOT             reduce using rule 11 (statement -> comment .)
    MINUS           reduce using rule 11 (statement -> comment .)
    $end            reduce using rule 11 (statement -> comment .)
    RBRACE          reduce using rule 11 (statement -> comment .)


state 12

    (12) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (55) lambda_expression -> IDENTIFIER . ASSIGN anonymous_function SEMICOLON
    (32) expression -> IDENTIFIER .
    (57) function_call -> IDENTIFIER . LPAREN argument_list RPAREN

    ASSIGN          shift and go to state 28
    SEMICOLON       reduce using rule 32 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 32 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 32 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 32 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 32 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 32 (expression -> IDENTIFIER .)
    GT              reduce using rule 32 (expression -> IDENTIFIER .)
    LT              reduce using rule 32 (expression -> IDENTIFIER .)
    GE              reduce using rule 32 (expression -> IDENTIFIER .)
    LE              reduce using rule 32 (expression -> IDENTIFIER .)
    EQ              reduce using rule 32 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 32 (expression -> IDENTIFIER .)
    AND             reduce using rule 32 (expression -> IDENTIFIER .)
    OR              reduce using rule 32 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 29


state 13

    (30) expression_statement -> expression . SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 14

    (13) print_statement -> PRINTLN . LPAREN expression RPAREN SEMICOLON
    (14) print_statement -> PRINTLN . LPAREN empty RPAREN SEMICOLON

    LPAREN          shift and go to state 44


state 15

    (35) expression -> LPAREN . expression RPAREN
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 45
    function_call                  shift and go to state 26

state 16

    (15) print_statement -> PRINT . LPAREN expression RPAREN SEMICOLON
    (16) print_statement -> PRINT . LPAREN empty SEMICOLON

    LPAREN          shift and go to state 47


state 17

    (17) if_statement -> IF . LPAREN expression RPAREN block elseif_list else_block

    LPAREN          shift and go to state 48


state 18

    (24) function_definition -> ZAP . IDENTIFIER LPAREN parameter_list RPAREN block

    IDENTIFIER      shift and go to state 49


state 19

    (28) return_statement -> RETURN . expression SEMICOLON
    (29) return_statement -> RETURN . empty SEMICOLON
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (58) empty -> .
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24
    SEMICOLON       reduce using rule 58 (empty -> .)

    expression                     shift and go to state 50
    empty                          shift and go to state 51
    function_call                  shift and go to state 26

state 20

    (59) comment -> COMMENT . IDENTIFIER

    IDENTIFIER      shift and go to state 52


state 21

    (31) expression -> NUMBER .

    SEMICOLON       reduce using rule 31 (expression -> NUMBER .)
    PLUS            reduce using rule 31 (expression -> NUMBER .)
    MINUS           reduce using rule 31 (expression -> NUMBER .)
    TIMES           reduce using rule 31 (expression -> NUMBER .)
    DIVIDE          reduce using rule 31 (expression -> NUMBER .)
    MODULO          reduce using rule 31 (expression -> NUMBER .)
    GT              reduce using rule 31 (expression -> NUMBER .)
    LT              reduce using rule 31 (expression -> NUMBER .)
    GE              reduce using rule 31 (expression -> NUMBER .)
    LE              reduce using rule 31 (expression -> NUMBER .)
    EQ              reduce using rule 31 (expression -> NUMBER .)
    NEQ             reduce using rule 31 (expression -> NUMBER .)
    AND             reduce using rule 31 (expression -> NUMBER .)
    OR              reduce using rule 31 (expression -> NUMBER .)
    RPAREN          reduce using rule 31 (expression -> NUMBER .)
    COMMA           reduce using rule 31 (expression -> NUMBER .)
    RBRACE          reduce using rule 31 (expression -> NUMBER .)


state 22

    (33) expression -> TRUE .

    SEMICOLON       reduce using rule 33 (expression -> TRUE .)
    PLUS            reduce using rule 33 (expression -> TRUE .)
    MINUS           reduce using rule 33 (expression -> TRUE .)
    TIMES           reduce using rule 33 (expression -> TRUE .)
    DIVIDE          reduce using rule 33 (expression -> TRUE .)
    MODULO          reduce using rule 33 (expression -> TRUE .)
    GT              reduce using rule 33 (expression -> TRUE .)
    LT              reduce using rule 33 (expression -> TRUE .)
    GE              reduce using rule 33 (expression -> TRUE .)
    LE              reduce using rule 33 (expression -> TRUE .)
    EQ              reduce using rule 33 (expression -> TRUE .)
    NEQ             reduce using rule 33 (expression -> TRUE .)
    AND             reduce using rule 33 (expression -> TRUE .)
    OR              reduce using rule 33 (expression -> TRUE .)
    RPAREN          reduce using rule 33 (expression -> TRUE .)
    COMMA           reduce using rule 33 (expression -> TRUE .)
    RBRACE          reduce using rule 33 (expression -> TRUE .)


state 23

    (34) expression -> FALSE .

    SEMICOLON       reduce using rule 34 (expression -> FALSE .)
    PLUS            reduce using rule 34 (expression -> FALSE .)
    MINUS           reduce using rule 34 (expression -> FALSE .)
    TIMES           reduce using rule 34 (expression -> FALSE .)
    DIVIDE          reduce using rule 34 (expression -> FALSE .)
    MODULO          reduce using rule 34 (expression -> FALSE .)
    GT              reduce using rule 34 (expression -> FALSE .)
    LT              reduce using rule 34 (expression -> FALSE .)
    GE              reduce using rule 34 (expression -> FALSE .)
    LE              reduce using rule 34 (expression -> FALSE .)
    EQ              reduce using rule 34 (expression -> FALSE .)
    NEQ             reduce using rule 34 (expression -> FALSE .)
    AND             reduce using rule 34 (expression -> FALSE .)
    OR              reduce using rule 34 (expression -> FALSE .)
    RPAREN          reduce using rule 34 (expression -> FALSE .)
    COMMA           reduce using rule 34 (expression -> FALSE .)
    RBRACE          reduce using rule 34 (expression -> FALSE .)


state 24

    (50) expression -> MINUS . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 53
    function_call                  shift and go to state 26

state 25

    (49) expression -> NOT . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 54
    function_call                  shift and go to state 26

state 26

    (51) expression -> function_call .

    SEMICOLON       reduce using rule 51 (expression -> function_call .)
    PLUS            reduce using rule 51 (expression -> function_call .)
    MINUS           reduce using rule 51 (expression -> function_call .)
    TIMES           reduce using rule 51 (expression -> function_call .)
    DIVIDE          reduce using rule 51 (expression -> function_call .)
    MODULO          reduce using rule 51 (expression -> function_call .)
    GT              reduce using rule 51 (expression -> function_call .)
    LT              reduce using rule 51 (expression -> function_call .)
    GE              reduce using rule 51 (expression -> function_call .)
    LE              reduce using rule 51 (expression -> function_call .)
    EQ              reduce using rule 51 (expression -> function_call .)
    NEQ             reduce using rule 51 (expression -> function_call .)
    AND             reduce using rule 51 (expression -> function_call .)
    OR              reduce using rule 51 (expression -> function_call .)
    RPAREN          reduce using rule 51 (expression -> function_call .)
    COMMA           reduce using rule 51 (expression -> function_call .)
    RBRACE          reduce using rule 51 (expression -> function_call .)


state 27

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    PRINTLN         reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    ZAP             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 28

    (12) assignment_statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (55) lambda_expression -> IDENTIFIER ASSIGN . anonymous_function SEMICOLON
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (56) anonymous_function -> . LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24
    LAMBDA          shift and go to state 57

    expression                     shift and go to state 55
    anonymous_function             shift and go to state 56
    function_call                  shift and go to state 26

state 29

    (57) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (52) argument_list -> . expression
    (53) argument_list -> . argument_list COMMA expression
    (54) argument_list -> . empty
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (58) empty -> .
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24
    RPAREN          reduce using rule 58 (empty -> .)
    COMMA           reduce using rule 58 (empty -> .)

    argument_list                  shift and go to state 58
    expression                     shift and go to state 59
    empty                          shift and go to state 60
    function_call                  shift and go to state 26

state 30

    (30) expression_statement -> expression SEMICOLON .

    IDENTIFIER      reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    PRINTLN         reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    ZAP             reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    COMMENT         reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 30 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 30 (expression_statement -> expression SEMICOLON .)


state 31

    (36) expression -> expression PLUS . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 61
    function_call                  shift and go to state 26

state 32

    (37) expression -> expression MINUS . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 62
    function_call                  shift and go to state 26

state 33

    (38) expression -> expression TIMES . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 63
    function_call                  shift and go to state 26

state 34

    (39) expression -> expression DIVIDE . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 64
    function_call                  shift and go to state 26

state 35

    (40) expression -> expression MODULO . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 65
    function_call                  shift and go to state 26

state 36

    (41) expression -> expression GT . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 66
    function_call                  shift and go to state 26

state 37

    (42) expression -> expression LT . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 67
    function_call                  shift and go to state 26

state 38

    (43) expression -> expression GE . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 68
    function_call                  shift and go to state 26

state 39

    (44) expression -> expression LE . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 69
    function_call                  shift and go to state 26

state 40

    (45) expression -> expression EQ . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 70
    function_call                  shift and go to state 26

state 41

    (46) expression -> expression NEQ . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 71
    function_call                  shift and go to state 26

state 42

    (47) expression -> expression AND . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 72
    function_call                  shift and go to state 26

state 43

    (48) expression -> expression OR . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 73
    function_call                  shift and go to state 26

state 44

    (13) print_statement -> PRINTLN LPAREN . expression RPAREN SEMICOLON
    (14) print_statement -> PRINTLN LPAREN . empty RPAREN SEMICOLON
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (58) empty -> .
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24
    RPAREN          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 74
    empty                          shift and go to state 75
    function_call                  shift and go to state 26

state 45

    (35) expression -> LPAREN expression . RPAREN
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 46

    (32) expression -> IDENTIFIER .
    (57) function_call -> IDENTIFIER . LPAREN argument_list RPAREN

    RPAREN          reduce using rule 32 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 32 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 32 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 32 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 32 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 32 (expression -> IDENTIFIER .)
    GT              reduce using rule 32 (expression -> IDENTIFIER .)
    LT              reduce using rule 32 (expression -> IDENTIFIER .)
    GE              reduce using rule 32 (expression -> IDENTIFIER .)
    LE              reduce using rule 32 (expression -> IDENTIFIER .)
    EQ              reduce using rule 32 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 32 (expression -> IDENTIFIER .)
    AND             reduce using rule 32 (expression -> IDENTIFIER .)
    OR              reduce using rule 32 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 32 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 32 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 32 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 29


state 47

    (15) print_statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (16) print_statement -> PRINT LPAREN . empty SEMICOLON
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (58) empty -> .
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24
    SEMICOLON       reduce using rule 58 (empty -> .)

    expression                     shift and go to state 77
    empty                          shift and go to state 78
    function_call                  shift and go to state 26

state 48

    (17) if_statement -> IF LPAREN . expression RPAREN block elseif_list else_block
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 79
    function_call                  shift and go to state 26

state 49

    (24) function_definition -> ZAP IDENTIFIER . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 80


state 50

    (28) return_statement -> RETURN expression . SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       shift and go to state 81
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 51

    (29) return_statement -> RETURN empty . SEMICOLON

    SEMICOLON       shift and go to state 82


state 52

    (59) comment -> COMMENT IDENTIFIER .

    IDENTIFIER      reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    PRINTLN         reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    PRINT           reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    IF              reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    ZAP             reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    RETURN          reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    COMMENT         reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    NUMBER          reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    TRUE            reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    FALSE           reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    LPAREN          reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    NOT             reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    MINUS           reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    $end            reduce using rule 59 (comment -> COMMENT IDENTIFIER .)
    RBRACE          reduce using rule 59 (comment -> COMMENT IDENTIFIER .)


state 53

    (50) expression -> MINUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 50 (expression -> MINUS expression .)
    PLUS            reduce using rule 50 (expression -> MINUS expression .)
    MINUS           reduce using rule 50 (expression -> MINUS expression .)
    TIMES           reduce using rule 50 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 50 (expression -> MINUS expression .)
    MODULO          reduce using rule 50 (expression -> MINUS expression .)
    GT              reduce using rule 50 (expression -> MINUS expression .)
    LT              reduce using rule 50 (expression -> MINUS expression .)
    GE              reduce using rule 50 (expression -> MINUS expression .)
    LE              reduce using rule 50 (expression -> MINUS expression .)
    EQ              reduce using rule 50 (expression -> MINUS expression .)
    NEQ             reduce using rule 50 (expression -> MINUS expression .)
    AND             reduce using rule 50 (expression -> MINUS expression .)
    OR              reduce using rule 50 (expression -> MINUS expression .)
    RPAREN          reduce using rule 50 (expression -> MINUS expression .)
    COMMA           reduce using rule 50 (expression -> MINUS expression .)
    RBRACE          reduce using rule 50 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 54

    (49) expression -> NOT expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 49 (expression -> NOT expression .)
    PLUS            reduce using rule 49 (expression -> NOT expression .)
    MINUS           reduce using rule 49 (expression -> NOT expression .)
    TIMES           reduce using rule 49 (expression -> NOT expression .)
    DIVIDE          reduce using rule 49 (expression -> NOT expression .)
    MODULO          reduce using rule 49 (expression -> NOT expression .)
    GT              reduce using rule 49 (expression -> NOT expression .)
    LT              reduce using rule 49 (expression -> NOT expression .)
    GE              reduce using rule 49 (expression -> NOT expression .)
    LE              reduce using rule 49 (expression -> NOT expression .)
    EQ              reduce using rule 49 (expression -> NOT expression .)
    NEQ             reduce using rule 49 (expression -> NOT expression .)
    AND             reduce using rule 49 (expression -> NOT expression .)
    OR              reduce using rule 49 (expression -> NOT expression .)
    RPAREN          reduce using rule 49 (expression -> NOT expression .)
    COMMA           reduce using rule 49 (expression -> NOT expression .)
    RBRACE          reduce using rule 49 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 55

    (12) assignment_statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       shift and go to state 83
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 56

    (55) lambda_expression -> IDENTIFIER ASSIGN anonymous_function . SEMICOLON

    SEMICOLON       shift and go to state 84


state 57

    (56) anonymous_function -> LAMBDA . LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    LPAREN          shift and go to state 85


state 58

    (57) function_call -> IDENTIFIER LPAREN argument_list . RPAREN
    (53) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 86
    COMMA           shift and go to state 87


state 59

    (52) argument_list -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          reduce using rule 52 (argument_list -> expression .)
    COMMA           reduce using rule 52 (argument_list -> expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 60

    (54) argument_list -> empty .

    RPAREN          reduce using rule 54 (argument_list -> empty .)
    COMMA           reduce using rule 54 (argument_list -> empty .)


state 61

    (36) expression -> expression PLUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 36 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 36 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 36 (expression -> expression PLUS expression .)
    GT              reduce using rule 36 (expression -> expression PLUS expression .)
    LT              reduce using rule 36 (expression -> expression PLUS expression .)
    GE              reduce using rule 36 (expression -> expression PLUS expression .)
    LE              reduce using rule 36 (expression -> expression PLUS expression .)
    EQ              reduce using rule 36 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 36 (expression -> expression PLUS expression .)
    AND             reduce using rule 36 (expression -> expression PLUS expression .)
    OR              reduce using rule 36 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 36 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 36 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 36 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! TIMES           [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 62

    (37) expression -> expression MINUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 37 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 37 (expression -> expression MINUS expression .)
    GT              reduce using rule 37 (expression -> expression MINUS expression .)
    LT              reduce using rule 37 (expression -> expression MINUS expression .)
    GE              reduce using rule 37 (expression -> expression MINUS expression .)
    LE              reduce using rule 37 (expression -> expression MINUS expression .)
    EQ              reduce using rule 37 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 37 (expression -> expression MINUS expression .)
    AND             reduce using rule 37 (expression -> expression MINUS expression .)
    OR              reduce using rule 37 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 37 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 37 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 37 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! TIMES           [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 63

    (38) expression -> expression TIMES expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 38 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 38 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 38 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 38 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 38 (expression -> expression TIMES expression .)
    GT              reduce using rule 38 (expression -> expression TIMES expression .)
    LT              reduce using rule 38 (expression -> expression TIMES expression .)
    GE              reduce using rule 38 (expression -> expression TIMES expression .)
    LE              reduce using rule 38 (expression -> expression TIMES expression .)
    EQ              reduce using rule 38 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 38 (expression -> expression TIMES expression .)
    AND             reduce using rule 38 (expression -> expression TIMES expression .)
    OR              reduce using rule 38 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 38 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 38 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 38 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 64

    (39) expression -> expression DIVIDE expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 39 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 39 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 39 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 39 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 39 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 39 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 39 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 39 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 39 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 39 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 39 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 39 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 39 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 39 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 39 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 39 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 65

    (40) expression -> expression MODULO expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 40 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 40 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 40 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 40 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 40 (expression -> expression MODULO expression .)
    GT              reduce using rule 40 (expression -> expression MODULO expression .)
    LT              reduce using rule 40 (expression -> expression MODULO expression .)
    GE              reduce using rule 40 (expression -> expression MODULO expression .)
    LE              reduce using rule 40 (expression -> expression MODULO expression .)
    EQ              reduce using rule 40 (expression -> expression MODULO expression .)
    NEQ             reduce using rule 40 (expression -> expression MODULO expression .)
    AND             reduce using rule 40 (expression -> expression MODULO expression .)
    OR              reduce using rule 40 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 40 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 40 (expression -> expression MODULO expression .)
    RBRACE          reduce using rule 40 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 66

    (41) expression -> expression GT expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression GT expression .)
    GT              reduce using rule 41 (expression -> expression GT expression .)
    LT              reduce using rule 41 (expression -> expression GT expression .)
    GE              reduce using rule 41 (expression -> expression GT expression .)
    LE              reduce using rule 41 (expression -> expression GT expression .)
    EQ              reduce using rule 41 (expression -> expression GT expression .)
    NEQ             reduce using rule 41 (expression -> expression GT expression .)
    AND             reduce using rule 41 (expression -> expression GT expression .)
    OR              reduce using rule 41 (expression -> expression GT expression .)
    RPAREN          reduce using rule 41 (expression -> expression GT expression .)
    COMMA           reduce using rule 41 (expression -> expression GT expression .)
    RBRACE          reduce using rule 41 (expression -> expression GT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! PLUS            [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 67

    (42) expression -> expression LT expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression LT expression .)
    GT              reduce using rule 42 (expression -> expression LT expression .)
    LT              reduce using rule 42 (expression -> expression LT expression .)
    GE              reduce using rule 42 (expression -> expression LT expression .)
    LE              reduce using rule 42 (expression -> expression LT expression .)
    EQ              reduce using rule 42 (expression -> expression LT expression .)
    NEQ             reduce using rule 42 (expression -> expression LT expression .)
    AND             reduce using rule 42 (expression -> expression LT expression .)
    OR              reduce using rule 42 (expression -> expression LT expression .)
    RPAREN          reduce using rule 42 (expression -> expression LT expression .)
    COMMA           reduce using rule 42 (expression -> expression LT expression .)
    RBRACE          reduce using rule 42 (expression -> expression LT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! PLUS            [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 68

    (43) expression -> expression GE expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression GE expression .)
    GT              reduce using rule 43 (expression -> expression GE expression .)
    LT              reduce using rule 43 (expression -> expression GE expression .)
    GE              reduce using rule 43 (expression -> expression GE expression .)
    LE              reduce using rule 43 (expression -> expression GE expression .)
    EQ              reduce using rule 43 (expression -> expression GE expression .)
    NEQ             reduce using rule 43 (expression -> expression GE expression .)
    AND             reduce using rule 43 (expression -> expression GE expression .)
    OR              reduce using rule 43 (expression -> expression GE expression .)
    RPAREN          reduce using rule 43 (expression -> expression GE expression .)
    COMMA           reduce using rule 43 (expression -> expression GE expression .)
    RBRACE          reduce using rule 43 (expression -> expression GE expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! PLUS            [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 69

    (44) expression -> expression LE expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 44 (expression -> expression LE expression .)
    GT              reduce using rule 44 (expression -> expression LE expression .)
    LT              reduce using rule 44 (expression -> expression LE expression .)
    GE              reduce using rule 44 (expression -> expression LE expression .)
    LE              reduce using rule 44 (expression -> expression LE expression .)
    EQ              reduce using rule 44 (expression -> expression LE expression .)
    NEQ             reduce using rule 44 (expression -> expression LE expression .)
    AND             reduce using rule 44 (expression -> expression LE expression .)
    OR              reduce using rule 44 (expression -> expression LE expression .)
    RPAREN          reduce using rule 44 (expression -> expression LE expression .)
    COMMA           reduce using rule 44 (expression -> expression LE expression .)
    RBRACE          reduce using rule 44 (expression -> expression LE expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! PLUS            [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! GE              [ shift and go to state 38 ]
  ! LE              [ shift and go to state 39 ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 70

    (45) expression -> expression EQ expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 45 (expression -> expression EQ expression .)
    EQ              reduce using rule 45 (expression -> expression EQ expression .)
    NEQ             reduce using rule 45 (expression -> expression EQ expression .)
    AND             reduce using rule 45 (expression -> expression EQ expression .)
    OR              reduce using rule 45 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 45 (expression -> expression EQ expression .)
    COMMA           reduce using rule 45 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 45 (expression -> expression EQ expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39

  ! PLUS            [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 71

    (46) expression -> expression NEQ expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 46 (expression -> expression NEQ expression .)
    EQ              reduce using rule 46 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 46 (expression -> expression NEQ expression .)
    AND             reduce using rule 46 (expression -> expression NEQ expression .)
    OR              reduce using rule 46 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 46 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 46 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 46 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39

  ! PLUS            [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! MODULO          [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 46 (expression -> expression NEQ expression .) ]
  ! EQ              [ shift and go to state 40 ]
  ! NEQ             [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 72

    (47) expression -> expression AND expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 47 (expression -> expression AND expression .)
    AND             reduce using rule 47 (expression -> expression AND expression .)
    OR              reduce using rule 47 (expression -> expression AND expression .)
    RPAREN          reduce using rule 47 (expression -> expression AND expression .)
    COMMA           reduce using rule 47 (expression -> expression AND expression .)
    RBRACE          reduce using rule 47 (expression -> expression AND expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41

  ! PLUS            [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 73

    (48) expression -> expression OR expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    SEMICOLON       reduce using rule 48 (expression -> expression OR expression .)
    OR              reduce using rule 48 (expression -> expression OR expression .)
    RPAREN          reduce using rule 48 (expression -> expression OR expression .)
    COMMA           reduce using rule 48 (expression -> expression OR expression .)
    RBRACE          reduce using rule 48 (expression -> expression OR expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42

  ! PLUS            [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 43 ]


state 74

    (13) print_statement -> PRINTLN LPAREN expression . RPAREN SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 75

    (14) print_statement -> PRINTLN LPAREN empty . RPAREN SEMICOLON

    RPAREN          shift and go to state 89


state 76

    (35) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 35 (expression -> LPAREN expression RPAREN .)


state 77

    (15) print_statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          shift and go to state 90
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 78

    (16) print_statement -> PRINT LPAREN empty . SEMICOLON

    SEMICOLON       shift and go to state 91


state 79

    (17) if_statement -> IF LPAREN expression . RPAREN block elseif_list else_block
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 80

    (24) function_definition -> ZAP IDENTIFIER LPAREN . parameter_list RPAREN block
    (25) parameter_list -> . IDENTIFIER
    (26) parameter_list -> . parameter_list COMMA IDENTIFIER
    (27) parameter_list -> . empty
    (58) empty -> .

    IDENTIFIER      shift and go to state 93
    RPAREN          reduce using rule 58 (empty -> .)
    COMMA           reduce using rule 58 (empty -> .)

    parameter_list                 shift and go to state 94
    empty                          shift and go to state 95

state 81

    (28) return_statement -> RETURN expression SEMICOLON .

    IDENTIFIER      reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    PRINTLN         reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    ZAP             reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    COMMENT         reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 28 (return_statement -> RETURN expression SEMICOLON .)


state 82

    (29) return_statement -> RETURN empty SEMICOLON .

    IDENTIFIER      reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    PRINTLN         reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    PRINT           reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    IF              reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    ZAP             reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    RETURN          reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    COMMENT         reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    NUMBER          reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    TRUE            reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    FALSE           reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    LPAREN          reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    NOT             reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    MINUS           reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    $end            reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)
    RBRACE          reduce using rule 29 (return_statement -> RETURN empty SEMICOLON .)


state 83

    (12) assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINTLN         reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    ZAP             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 84

    (55) lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .

    IDENTIFIER      reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    PRINTLN         reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    PRINT           reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    IF              reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    ZAP             reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    RETURN          reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    COMMENT         reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    NUMBER          reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    TRUE            reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    FALSE           reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    LPAREN          reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    NOT             reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    MINUS           reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    $end            reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    RBRACE          reduce using rule 55 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)


state 85

    (56) anonymous_function -> LAMBDA LPAREN . parameter_list RPAREN COLON LBRACE expression RBRACE
    (25) parameter_list -> . IDENTIFIER
    (26) parameter_list -> . parameter_list COMMA IDENTIFIER
    (27) parameter_list -> . empty
    (58) empty -> .

    IDENTIFIER      shift and go to state 93
    RPAREN          reduce using rule 58 (empty -> .)
    COMMA           reduce using rule 58 (empty -> .)

    parameter_list                 shift and go to state 96
    empty                          shift and go to state 95

state 86

    (57) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MODULO          reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GT              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LT              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GE              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LE              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    EQ              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    AND             reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    OR              reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 57 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 87

    (53) argument_list -> argument_list COMMA . expression
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 97
    function_call                  shift and go to state 26

state 88

    (13) print_statement -> PRINTLN LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 89

    (14) print_statement -> PRINTLN LPAREN empty RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 99


state 90

    (15) print_statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 100


state 91

    (16) print_statement -> PRINT LPAREN empty SEMICOLON .

    IDENTIFIER      reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    PRINTLN         reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    PRINT           reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    IF              reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    ZAP             reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    RETURN          reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    COMMENT         reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    NUMBER          reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    TRUE            reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    FALSE           reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    LPAREN          reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    NOT             reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    MINUS           reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    $end            reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)
    RBRACE          reduce using rule 16 (print_statement -> PRINT LPAREN empty SEMICOLON .)


state 92

    (17) if_statement -> IF LPAREN expression RPAREN . block elseif_list else_block
    (23) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 102

    block                          shift and go to state 101

state 93

    (25) parameter_list -> IDENTIFIER .

    RPAREN          reduce using rule 25 (parameter_list -> IDENTIFIER .)
    COMMA           reduce using rule 25 (parameter_list -> IDENTIFIER .)


state 94

    (24) function_definition -> ZAP IDENTIFIER LPAREN parameter_list . RPAREN block
    (26) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 104


state 95

    (27) parameter_list -> empty .

    RPAREN          reduce using rule 27 (parameter_list -> empty .)
    COMMA           reduce using rule 27 (parameter_list -> empty .)


state 96

    (56) anonymous_function -> LAMBDA LPAREN parameter_list . RPAREN COLON LBRACE expression RBRACE
    (26) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 104


state 97

    (53) argument_list -> argument_list COMMA expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          reduce using rule 53 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 53 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 98

    (13) print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    PRINTLN         reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    ZAP             reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    COMMENT         reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 13 (print_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON .)


state 99

    (14) print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    PRINTLN         reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    PRINT           reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    IF              reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    ZAP             reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    RETURN          reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    COMMENT         reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    NUMBER          reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    TRUE            reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    FALSE           reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    LPAREN          reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    NOT             reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    MINUS           reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    $end            reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)
    RBRACE          reduce using rule 14 (print_statement -> PRINTLN LPAREN empty RPAREN SEMICOLON .)


state 100

    (15) print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINTLN         reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ZAP             reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    COMMENT         reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 15 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 101

    (17) if_statement -> IF LPAREN expression RPAREN block . elseif_list else_block
    (18) elseif_list -> . elseif_list elseif
    (19) elseif_list -> . empty
    (58) empty -> .

    ELSE            reduce using rule 58 (empty -> .)
    ELSEIF          reduce using rule 58 (empty -> .)
    IDENTIFIER      reduce using rule 58 (empty -> .)
    PRINTLN         reduce using rule 58 (empty -> .)
    PRINT           reduce using rule 58 (empty -> .)
    IF              reduce using rule 58 (empty -> .)
    ZAP             reduce using rule 58 (empty -> .)
    RETURN          reduce using rule 58 (empty -> .)
    COMMENT         reduce using rule 58 (empty -> .)
    NUMBER          reduce using rule 58 (empty -> .)
    TRUE            reduce using rule 58 (empty -> .)
    FALSE           reduce using rule 58 (empty -> .)
    LPAREN          reduce using rule 58 (empty -> .)
    NOT             reduce using rule 58 (empty -> .)
    MINUS           reduce using rule 58 (empty -> .)
    $end            reduce using rule 58 (empty -> .)
    RBRACE          reduce using rule 58 (empty -> .)

    elseif_list                    shift and go to state 106
    empty                          shift and go to state 107

state 102

    (23) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINTLN LPAREN expression RPAREN SEMICOLON
    (14) print_statement -> . PRINTLN LPAREN empty RPAREN SEMICOLON
    (15) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (16) print_statement -> . PRINT LPAREN empty SEMICOLON
    (17) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (24) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (28) return_statement -> . RETURN expression SEMICOLON
    (29) return_statement -> . RETURN empty SEMICOLON
    (30) expression_statement -> . expression SEMICOLON
    (55) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (59) comment -> . COMMENT IDENTIFIER
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    IDENTIFIER      shift and go to state 12
    PRINTLN         shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    ZAP             shift and go to state 18
    RETURN          shift and go to state 19
    COMMENT         shift and go to state 20
    NUMBER          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    statement_list                 shift and go to state 108
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 26

state 103

    (24) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN . block
    (23) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 102

    block                          shift and go to state 109

state 104

    (26) parameter_list -> parameter_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 110


state 105

    (56) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN . COLON LBRACE expression RBRACE

    COLON           shift and go to state 111


state 106

    (17) if_statement -> IF LPAREN expression RPAREN block elseif_list . else_block
    (18) elseif_list -> elseif_list . elseif
    (21) else_block -> . ELSE block
    (22) else_block -> . empty
    (20) elseif -> . ELSEIF LPAREN expression RPAREN block
    (58) empty -> .

    ELSE            shift and go to state 114
    ELSEIF          shift and go to state 116
    IDENTIFIER      reduce using rule 58 (empty -> .)
    PRINTLN         reduce using rule 58 (empty -> .)
    PRINT           reduce using rule 58 (empty -> .)
    IF              reduce using rule 58 (empty -> .)
    ZAP             reduce using rule 58 (empty -> .)
    RETURN          reduce using rule 58 (empty -> .)
    COMMENT         reduce using rule 58 (empty -> .)
    NUMBER          reduce using rule 58 (empty -> .)
    TRUE            reduce using rule 58 (empty -> .)
    FALSE           reduce using rule 58 (empty -> .)
    LPAREN          reduce using rule 58 (empty -> .)
    NOT             reduce using rule 58 (empty -> .)
    MINUS           reduce using rule 58 (empty -> .)
    $end            reduce using rule 58 (empty -> .)
    RBRACE          reduce using rule 58 (empty -> .)

    else_block                     shift and go to state 112
    elseif                         shift and go to state 113
    empty                          shift and go to state 115

state 107

    (19) elseif_list -> empty .

    ELSE            reduce using rule 19 (elseif_list -> empty .)
    ELSEIF          reduce using rule 19 (elseif_list -> empty .)
    IDENTIFIER      reduce using rule 19 (elseif_list -> empty .)
    PRINTLN         reduce using rule 19 (elseif_list -> empty .)
    PRINT           reduce using rule 19 (elseif_list -> empty .)
    IF              reduce using rule 19 (elseif_list -> empty .)
    ZAP             reduce using rule 19 (elseif_list -> empty .)
    RETURN          reduce using rule 19 (elseif_list -> empty .)
    COMMENT         reduce using rule 19 (elseif_list -> empty .)
    NUMBER          reduce using rule 19 (elseif_list -> empty .)
    TRUE            reduce using rule 19 (elseif_list -> empty .)
    FALSE           reduce using rule 19 (elseif_list -> empty .)
    LPAREN          reduce using rule 19 (elseif_list -> empty .)
    NOT             reduce using rule 19 (elseif_list -> empty .)
    MINUS           reduce using rule 19 (elseif_list -> empty .)
    $end            reduce using rule 19 (elseif_list -> empty .)
    RBRACE          reduce using rule 19 (elseif_list -> empty .)


state 108

    (23) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINTLN LPAREN expression RPAREN SEMICOLON
    (14) print_statement -> . PRINTLN LPAREN empty RPAREN SEMICOLON
    (15) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (16) print_statement -> . PRINT LPAREN empty SEMICOLON
    (17) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (24) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (28) return_statement -> . RETURN expression SEMICOLON
    (29) return_statement -> . RETURN empty SEMICOLON
    (30) expression_statement -> . expression SEMICOLON
    (55) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (59) comment -> . COMMENT IDENTIFIER
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    RBRACE          shift and go to state 117
    IDENTIFIER      shift and go to state 12
    PRINTLN         shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    ZAP             shift and go to state 18
    RETURN          shift and go to state 19
    COMMENT         shift and go to state 20
    NUMBER          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    statement                      shift and go to state 27
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 26

state 109

    (24) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .

    IDENTIFIER      reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    PRINTLN         reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    PRINT           reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    IF              reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    ZAP             reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RETURN          reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    COMMENT         reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NUMBER          reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    TRUE            reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    FALSE           reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    LPAREN          reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NOT             reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    MINUS           reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    $end            reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RBRACE          reduce using rule 24 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)


state 110

    (26) parameter_list -> parameter_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 26 (parameter_list -> parameter_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 26 (parameter_list -> parameter_list COMMA IDENTIFIER .)


state 111

    (56) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON . LBRACE expression RBRACE

    LBRACE          shift and go to state 118


state 112

    (17) if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .

    IDENTIFIER      reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    PRINTLN         reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    PRINT           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    IF              reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    ZAP             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RETURN          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    COMMENT         reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NUMBER          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    TRUE            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    FALSE           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    LPAREN          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NOT             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    MINUS           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    $end            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RBRACE          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)


state 113

    (18) elseif_list -> elseif_list elseif .

    ELSE            reduce using rule 18 (elseif_list -> elseif_list elseif .)
    ELSEIF          reduce using rule 18 (elseif_list -> elseif_list elseif .)
    IDENTIFIER      reduce using rule 18 (elseif_list -> elseif_list elseif .)
    PRINTLN         reduce using rule 18 (elseif_list -> elseif_list elseif .)
    PRINT           reduce using rule 18 (elseif_list -> elseif_list elseif .)
    IF              reduce using rule 18 (elseif_list -> elseif_list elseif .)
    ZAP             reduce using rule 18 (elseif_list -> elseif_list elseif .)
    RETURN          reduce using rule 18 (elseif_list -> elseif_list elseif .)
    COMMENT         reduce using rule 18 (elseif_list -> elseif_list elseif .)
    NUMBER          reduce using rule 18 (elseif_list -> elseif_list elseif .)
    TRUE            reduce using rule 18 (elseif_list -> elseif_list elseif .)
    FALSE           reduce using rule 18 (elseif_list -> elseif_list elseif .)
    LPAREN          reduce using rule 18 (elseif_list -> elseif_list elseif .)
    NOT             reduce using rule 18 (elseif_list -> elseif_list elseif .)
    MINUS           reduce using rule 18 (elseif_list -> elseif_list elseif .)
    $end            reduce using rule 18 (elseif_list -> elseif_list elseif .)
    RBRACE          reduce using rule 18 (elseif_list -> elseif_list elseif .)


state 114

    (21) else_block -> ELSE . block
    (23) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 102

    block                          shift and go to state 119

state 115

    (22) else_block -> empty .

    IDENTIFIER      reduce using rule 22 (else_block -> empty .)
    PRINTLN         reduce using rule 22 (else_block -> empty .)
    PRINT           reduce using rule 22 (else_block -> empty .)
    IF              reduce using rule 22 (else_block -> empty .)
    ZAP             reduce using rule 22 (else_block -> empty .)
    RETURN          reduce using rule 22 (else_block -> empty .)
    COMMENT         reduce using rule 22 (else_block -> empty .)
    NUMBER          reduce using rule 22 (else_block -> empty .)
    TRUE            reduce using rule 22 (else_block -> empty .)
    FALSE           reduce using rule 22 (else_block -> empty .)
    LPAREN          reduce using rule 22 (else_block -> empty .)
    NOT             reduce using rule 22 (else_block -> empty .)
    MINUS           reduce using rule 22 (else_block -> empty .)
    $end            reduce using rule 22 (else_block -> empty .)
    RBRACE          reduce using rule 22 (else_block -> empty .)


state 116

    (20) elseif -> ELSEIF . LPAREN expression RPAREN block

    LPAREN          shift and go to state 120


state 117

    (23) block -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    ELSEIF          reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    PRINTLN         reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    ZAP             reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    COMMENT         reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 23 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 23 (block -> LBRACE statement_list RBRACE .)


state 118

    (56) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE . expression RBRACE
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 121
    function_call                  shift and go to state 26

state 119

    (21) else_block -> ELSE block .

    IDENTIFIER      reduce using rule 21 (else_block -> ELSE block .)
    PRINTLN         reduce using rule 21 (else_block -> ELSE block .)
    PRINT           reduce using rule 21 (else_block -> ELSE block .)
    IF              reduce using rule 21 (else_block -> ELSE block .)
    ZAP             reduce using rule 21 (else_block -> ELSE block .)
    RETURN          reduce using rule 21 (else_block -> ELSE block .)
    COMMENT         reduce using rule 21 (else_block -> ELSE block .)
    NUMBER          reduce using rule 21 (else_block -> ELSE block .)
    TRUE            reduce using rule 21 (else_block -> ELSE block .)
    FALSE           reduce using rule 21 (else_block -> ELSE block .)
    LPAREN          reduce using rule 21 (else_block -> ELSE block .)
    NOT             reduce using rule 21 (else_block -> ELSE block .)
    MINUS           reduce using rule 21 (else_block -> ELSE block .)
    $end            reduce using rule 21 (else_block -> ELSE block .)
    RBRACE          reduce using rule 21 (else_block -> ELSE block .)


state 120

    (20) elseif -> ELSEIF LPAREN . expression RPAREN block
    (31) expression -> . NUMBER
    (32) expression -> . IDENTIFIER
    (33) expression -> . TRUE
    (34) expression -> . FALSE
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression TIMES expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NEQ expression
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . NOT expression
    (50) expression -> . MINUS expression
    (51) expression -> . function_call
    (57) function_call -> . IDENTIFIER LPAREN argument_list RPAREN

    NUMBER          shift and go to state 21
    IDENTIFIER      shift and go to state 46
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    LPAREN          shift and go to state 15
    NOT             shift and go to state 25
    MINUS           shift and go to state 24

    expression                     shift and go to state 122
    function_call                  shift and go to state 26

state 121

    (56) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression . RBRACE
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RBRACE          shift and go to state 123
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 122

    (20) elseif -> ELSEIF LPAREN expression . RPAREN block
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . TIMES expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NEQ expression
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression

    RPAREN          shift and go to state 124
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    GE              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NEQ             shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 123

    (56) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .

    SEMICOLON       reduce using rule 56 (anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)


state 124

    (20) elseif -> ELSEIF LPAREN expression RPAREN . block
    (23) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 102

    block                          shift and go to state 125

state 125

    (20) elseif -> ELSEIF LPAREN expression RPAREN block .

    ELSE            reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ELSEIF          reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IDENTIFIER      reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    PRINTLN         reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    PRINT           reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IF              reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ZAP             reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    COMMENT         reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NUMBER          reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    TRUE            reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    FALSE           reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NOT             reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    MINUS           reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    $end            reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 20 (elseif -> ELSEIF LPAREN expression RPAREN block .)

