Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_definition
Rule 8     statement -> return_statement
Rule 9     statement -> expression_statement
Rule 10    statement -> lambda_expression
Rule 11    statement -> comment
Rule 12    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 13    print_statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 14    if_statement -> IF LPAREN expression RPAREN block elseif_list else_block
Rule 15    elseif_list -> elseif_list elseif
Rule 16    elseif_list -> empty
Rule 17    elseif -> ELSEIF LPAREN expression RPAREN block
Rule 18    else_block -> ELSE block
Rule 19    else_block -> empty
Rule 20    block -> LBRACE statement_list RBRACE
Rule 21    function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block
Rule 22    parameter_list -> IDENTIFIER
Rule 23    parameter_list -> parameter_list COMMA IDENTIFIER
Rule 24    parameter_list -> empty
Rule 25    return_statement -> RETURN expression SEMICOLON
Rule 26    expression_statement -> expression SEMICOLON
Rule 27    expression -> NUMBER
Rule 28    expression -> IDENTIFIER
Rule 29    expression -> TRUE
Rule 30    expression -> FALSE
Rule 31    expression -> LPAREN expression RPAREN
Rule 32    expression -> expression PLUS expression
Rule 33    expression -> expression MINUS expression
Rule 34    expression -> expression TIMES expression
Rule 35    expression -> expression DIVIDE expression
Rule 36    expression -> expression MODULO expression
Rule 37    expression -> expression GT expression
Rule 38    expression -> expression LT expression
Rule 39    expression -> expression GE expression
Rule 40    expression -> expression LE expression
Rule 41    expression -> expression EQ expression
Rule 42    expression -> expression NEQ expression
Rule 43    expression -> expression AND expression
Rule 44    expression -> expression OR expression
Rule 45    expression -> NOT expression
Rule 46    expression -> MINUS expression
Rule 47    expression -> function_call
Rule 48    expression -> lambda_call
Rule 49    argument_list -> expression
Rule 50    argument_list -> argument_list COMMA expression
Rule 51    argument_list -> empty
Rule 52    lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON
Rule 53    anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
Rule 54    lambda_call -> IDENTIFIER LBRACE argument_list RBRACE
Rule 55    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 56    empty -> <empty>
Rule 57    comment -> COMMENT IDENTIFIER

Terminals, with rules where they appear

AND                  : 43
ASSIGN               : 12 52
COLON                : 53
COMMA                : 23 50
COMMENT              : 57
DIVIDE               : 35
ELSE                 : 18
ELSEIF               : 17
EQ                   : 41
FALSE                : 30
GE                   : 39
GT                   : 37
IDENTIFIER           : 12 21 22 23 28 52 54 55 57
IF                   : 14
LAMBDA               : 53
LBRACE               : 20 53 54
LE                   : 40
LPAREN               : 13 14 17 21 31 53 55
LT                   : 38
MINUS                : 33 46
MODULO               : 36
NEQ                  : 42
NOT                  : 45
NUMBER               : 27
OR                   : 44
PLUS                 : 32
PRINT                : 13
RBRACE               : 20 53 54
RETURN               : 25
RPAREN               : 13 14 17 21 31 53 55
SEMICOLON            : 12 13 25 26 52
TIMES                : 34
TRUE                 : 29
ZAP                  : 21
error                : 

Nonterminals, with rules where they appear

anonymous_function   : 52
argument_list        : 50 54 55
assignment_statement : 4
block                : 14 17 18 21
comment              : 11
else_block           : 14
elseif               : 15
elseif_list          : 14 15
empty                : 16 19 24 51
expression           : 12 13 14 17 25 26 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46 49 50 53
expression_statement : 9
function_call        : 47
function_definition  : 7
if_statement         : 6
lambda_call          : 48
lambda_expression    : 10
parameter_list       : 21 23 53
print_statement      : 5
program              : 0
return_statement     : 8
statement            : 2 3
statement_list       : 1 3 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (14) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (21) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (25) return_statement -> . RETURN expression SEMICOLON
    (26) expression_statement -> . expression SEMICOLON
    (52) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (57) comment -> . COMMENT IDENTIFIER
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 14
    IF              shift and go to state 16
    ZAP             shift and go to state 17
    RETURN          shift and go to state 18
    COMMENT         shift and go to state 19
    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (14) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (21) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (25) return_statement -> . RETURN expression SEMICOLON
    (26) expression_statement -> . expression SEMICOLON
    (52) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (57) comment -> . COMMENT IDENTIFIER
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 14
    IF              shift and go to state 16
    ZAP             shift and go to state 17
    RETURN          shift and go to state 18
    COMMENT         shift and go to state 19
    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    statement                      shift and go to state 27
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    ZAP             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    COMMENT         reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    NOT             reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment_statement .

    IDENTIFIER      reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    ZAP             reduce using rule 4 (statement -> assignment_statement .)
    RETURN          reduce using rule 4 (statement -> assignment_statement .)
    COMMENT         reduce using rule 4 (statement -> assignment_statement .)
    NUMBER          reduce using rule 4 (statement -> assignment_statement .)
    TRUE            reduce using rule 4 (statement -> assignment_statement .)
    FALSE           reduce using rule 4 (statement -> assignment_statement .)
    LPAREN          reduce using rule 4 (statement -> assignment_statement .)
    NOT             reduce using rule 4 (statement -> assignment_statement .)
    MINUS           reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACE          reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    ZAP             reduce using rule 5 (statement -> print_statement .)
    RETURN          reduce using rule 5 (statement -> print_statement .)
    COMMENT         reduce using rule 5 (statement -> print_statement .)
    NUMBER          reduce using rule 5 (statement -> print_statement .)
    TRUE            reduce using rule 5 (statement -> print_statement .)
    FALSE           reduce using rule 5 (statement -> print_statement .)
    LPAREN          reduce using rule 5 (statement -> print_statement .)
    NOT             reduce using rule 5 (statement -> print_statement .)
    MINUS           reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    ZAP             reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    COMMENT         reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_definition .

    IDENTIFIER      reduce using rule 7 (statement -> function_definition .)
    PRINT           reduce using rule 7 (statement -> function_definition .)
    IF              reduce using rule 7 (statement -> function_definition .)
    ZAP             reduce using rule 7 (statement -> function_definition .)
    RETURN          reduce using rule 7 (statement -> function_definition .)
    COMMENT         reduce using rule 7 (statement -> function_definition .)
    NUMBER          reduce using rule 7 (statement -> function_definition .)
    TRUE            reduce using rule 7 (statement -> function_definition .)
    FALSE           reduce using rule 7 (statement -> function_definition .)
    LPAREN          reduce using rule 7 (statement -> function_definition .)
    NOT             reduce using rule 7 (statement -> function_definition .)
    MINUS           reduce using rule 7 (statement -> function_definition .)
    $end            reduce using rule 7 (statement -> function_definition .)
    RBRACE          reduce using rule 7 (statement -> function_definition .)


state 8

    (8) statement -> return_statement .

    IDENTIFIER      reduce using rule 8 (statement -> return_statement .)
    PRINT           reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    ZAP             reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    COMMENT         reduce using rule 8 (statement -> return_statement .)
    NUMBER          reduce using rule 8 (statement -> return_statement .)
    TRUE            reduce using rule 8 (statement -> return_statement .)
    FALSE           reduce using rule 8 (statement -> return_statement .)
    LPAREN          reduce using rule 8 (statement -> return_statement .)
    NOT             reduce using rule 8 (statement -> return_statement .)
    MINUS           reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> expression_statement .

    IDENTIFIER      reduce using rule 9 (statement -> expression_statement .)
    PRINT           reduce using rule 9 (statement -> expression_statement .)
    IF              reduce using rule 9 (statement -> expression_statement .)
    ZAP             reduce using rule 9 (statement -> expression_statement .)
    RETURN          reduce using rule 9 (statement -> expression_statement .)
    COMMENT         reduce using rule 9 (statement -> expression_statement .)
    NUMBER          reduce using rule 9 (statement -> expression_statement .)
    TRUE            reduce using rule 9 (statement -> expression_statement .)
    FALSE           reduce using rule 9 (statement -> expression_statement .)
    LPAREN          reduce using rule 9 (statement -> expression_statement .)
    NOT             reduce using rule 9 (statement -> expression_statement .)
    MINUS           reduce using rule 9 (statement -> expression_statement .)
    $end            reduce using rule 9 (statement -> expression_statement .)
    RBRACE          reduce using rule 9 (statement -> expression_statement .)


state 10

    (10) statement -> lambda_expression .

    IDENTIFIER      reduce using rule 10 (statement -> lambda_expression .)
    PRINT           reduce using rule 10 (statement -> lambda_expression .)
    IF              reduce using rule 10 (statement -> lambda_expression .)
    ZAP             reduce using rule 10 (statement -> lambda_expression .)
    RETURN          reduce using rule 10 (statement -> lambda_expression .)
    COMMENT         reduce using rule 10 (statement -> lambda_expression .)
    NUMBER          reduce using rule 10 (statement -> lambda_expression .)
    TRUE            reduce using rule 10 (statement -> lambda_expression .)
    FALSE           reduce using rule 10 (statement -> lambda_expression .)
    LPAREN          reduce using rule 10 (statement -> lambda_expression .)
    NOT             reduce using rule 10 (statement -> lambda_expression .)
    MINUS           reduce using rule 10 (statement -> lambda_expression .)
    $end            reduce using rule 10 (statement -> lambda_expression .)
    RBRACE          reduce using rule 10 (statement -> lambda_expression .)


state 11

    (11) statement -> comment .

    IDENTIFIER      reduce using rule 11 (statement -> comment .)
    PRINT           reduce using rule 11 (statement -> comment .)
    IF              reduce using rule 11 (statement -> comment .)
    ZAP             reduce using rule 11 (statement -> comment .)
    RETURN          reduce using rule 11 (statement -> comment .)
    COMMENT         reduce using rule 11 (statement -> comment .)
    NUMBER          reduce using rule 11 (statement -> comment .)
    TRUE            reduce using rule 11 (statement -> comment .)
    FALSE           reduce using rule 11 (statement -> comment .)
    LPAREN          reduce using rule 11 (statement -> comment .)
    NOT             reduce using rule 11 (statement -> comment .)
    MINUS           reduce using rule 11 (statement -> comment .)
    $end            reduce using rule 11 (statement -> comment .)
    RBRACE          reduce using rule 11 (statement -> comment .)


state 12

    (12) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (52) lambda_expression -> IDENTIFIER . ASSIGN anonymous_function SEMICOLON
    (28) expression -> IDENTIFIER .
    (55) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (54) lambda_call -> IDENTIFIER . LBRACE argument_list RBRACE

    ASSIGN          shift and go to state 28
    SEMICOLON       reduce using rule 28 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 28 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 28 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 28 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 28 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 28 (expression -> IDENTIFIER .)
    GT              reduce using rule 28 (expression -> IDENTIFIER .)
    LT              reduce using rule 28 (expression -> IDENTIFIER .)
    GE              reduce using rule 28 (expression -> IDENTIFIER .)
    LE              reduce using rule 28 (expression -> IDENTIFIER .)
    EQ              reduce using rule 28 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 28 (expression -> IDENTIFIER .)
    AND             reduce using rule 28 (expression -> IDENTIFIER .)
    OR              reduce using rule 28 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 29
    LBRACE          shift and go to state 30


state 13

    (26) expression_statement -> expression . SEMICOLON
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 14

    (13) print_statement -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 45


state 15

    (31) expression -> LPAREN . expression RPAREN
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 46
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 16

    (14) if_statement -> IF . LPAREN expression RPAREN block elseif_list else_block

    LPAREN          shift and go to state 48


state 17

    (21) function_definition -> ZAP . IDENTIFIER LPAREN parameter_list RPAREN block

    IDENTIFIER      shift and go to state 49


state 18

    (25) return_statement -> RETURN . expression SEMICOLON
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 50
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 19

    (57) comment -> COMMENT . IDENTIFIER

    IDENTIFIER      shift and go to state 51


state 20

    (27) expression -> NUMBER .

    SEMICOLON       reduce using rule 27 (expression -> NUMBER .)
    PLUS            reduce using rule 27 (expression -> NUMBER .)
    MINUS           reduce using rule 27 (expression -> NUMBER .)
    TIMES           reduce using rule 27 (expression -> NUMBER .)
    DIVIDE          reduce using rule 27 (expression -> NUMBER .)
    MODULO          reduce using rule 27 (expression -> NUMBER .)
    GT              reduce using rule 27 (expression -> NUMBER .)
    LT              reduce using rule 27 (expression -> NUMBER .)
    GE              reduce using rule 27 (expression -> NUMBER .)
    LE              reduce using rule 27 (expression -> NUMBER .)
    EQ              reduce using rule 27 (expression -> NUMBER .)
    NEQ             reduce using rule 27 (expression -> NUMBER .)
    AND             reduce using rule 27 (expression -> NUMBER .)
    OR              reduce using rule 27 (expression -> NUMBER .)
    RPAREN          reduce using rule 27 (expression -> NUMBER .)
    COMMA           reduce using rule 27 (expression -> NUMBER .)
    RBRACE          reduce using rule 27 (expression -> NUMBER .)


state 21

    (29) expression -> TRUE .

    SEMICOLON       reduce using rule 29 (expression -> TRUE .)
    PLUS            reduce using rule 29 (expression -> TRUE .)
    MINUS           reduce using rule 29 (expression -> TRUE .)
    TIMES           reduce using rule 29 (expression -> TRUE .)
    DIVIDE          reduce using rule 29 (expression -> TRUE .)
    MODULO          reduce using rule 29 (expression -> TRUE .)
    GT              reduce using rule 29 (expression -> TRUE .)
    LT              reduce using rule 29 (expression -> TRUE .)
    GE              reduce using rule 29 (expression -> TRUE .)
    LE              reduce using rule 29 (expression -> TRUE .)
    EQ              reduce using rule 29 (expression -> TRUE .)
    NEQ             reduce using rule 29 (expression -> TRUE .)
    AND             reduce using rule 29 (expression -> TRUE .)
    OR              reduce using rule 29 (expression -> TRUE .)
    RPAREN          reduce using rule 29 (expression -> TRUE .)
    COMMA           reduce using rule 29 (expression -> TRUE .)
    RBRACE          reduce using rule 29 (expression -> TRUE .)


state 22

    (30) expression -> FALSE .

    SEMICOLON       reduce using rule 30 (expression -> FALSE .)
    PLUS            reduce using rule 30 (expression -> FALSE .)
    MINUS           reduce using rule 30 (expression -> FALSE .)
    TIMES           reduce using rule 30 (expression -> FALSE .)
    DIVIDE          reduce using rule 30 (expression -> FALSE .)
    MODULO          reduce using rule 30 (expression -> FALSE .)
    GT              reduce using rule 30 (expression -> FALSE .)
    LT              reduce using rule 30 (expression -> FALSE .)
    GE              reduce using rule 30 (expression -> FALSE .)
    LE              reduce using rule 30 (expression -> FALSE .)
    EQ              reduce using rule 30 (expression -> FALSE .)
    NEQ             reduce using rule 30 (expression -> FALSE .)
    AND             reduce using rule 30 (expression -> FALSE .)
    OR              reduce using rule 30 (expression -> FALSE .)
    RPAREN          reduce using rule 30 (expression -> FALSE .)
    COMMA           reduce using rule 30 (expression -> FALSE .)
    RBRACE          reduce using rule 30 (expression -> FALSE .)


state 23

    (46) expression -> MINUS . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 52
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 24

    (45) expression -> NOT . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 53
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 25

    (47) expression -> function_call .

    SEMICOLON       reduce using rule 47 (expression -> function_call .)
    PLUS            reduce using rule 47 (expression -> function_call .)
    MINUS           reduce using rule 47 (expression -> function_call .)
    TIMES           reduce using rule 47 (expression -> function_call .)
    DIVIDE          reduce using rule 47 (expression -> function_call .)
    MODULO          reduce using rule 47 (expression -> function_call .)
    GT              reduce using rule 47 (expression -> function_call .)
    LT              reduce using rule 47 (expression -> function_call .)
    GE              reduce using rule 47 (expression -> function_call .)
    LE              reduce using rule 47 (expression -> function_call .)
    EQ              reduce using rule 47 (expression -> function_call .)
    NEQ             reduce using rule 47 (expression -> function_call .)
    AND             reduce using rule 47 (expression -> function_call .)
    OR              reduce using rule 47 (expression -> function_call .)
    RPAREN          reduce using rule 47 (expression -> function_call .)
    COMMA           reduce using rule 47 (expression -> function_call .)
    RBRACE          reduce using rule 47 (expression -> function_call .)


state 26

    (48) expression -> lambda_call .

    SEMICOLON       reduce using rule 48 (expression -> lambda_call .)
    PLUS            reduce using rule 48 (expression -> lambda_call .)
    MINUS           reduce using rule 48 (expression -> lambda_call .)
    TIMES           reduce using rule 48 (expression -> lambda_call .)
    DIVIDE          reduce using rule 48 (expression -> lambda_call .)
    MODULO          reduce using rule 48 (expression -> lambda_call .)
    GT              reduce using rule 48 (expression -> lambda_call .)
    LT              reduce using rule 48 (expression -> lambda_call .)
    GE              reduce using rule 48 (expression -> lambda_call .)
    LE              reduce using rule 48 (expression -> lambda_call .)
    EQ              reduce using rule 48 (expression -> lambda_call .)
    NEQ             reduce using rule 48 (expression -> lambda_call .)
    AND             reduce using rule 48 (expression -> lambda_call .)
    OR              reduce using rule 48 (expression -> lambda_call .)
    RPAREN          reduce using rule 48 (expression -> lambda_call .)
    COMMA           reduce using rule 48 (expression -> lambda_call .)
    RBRACE          reduce using rule 48 (expression -> lambda_call .)


state 27

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    ZAP             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 28

    (12) assignment_statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (52) lambda_expression -> IDENTIFIER ASSIGN . anonymous_function SEMICOLON
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (53) anonymous_function -> . LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    LAMBDA          shift and go to state 56

    expression                     shift and go to state 54
    anonymous_function             shift and go to state 55
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 29

    (55) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (49) argument_list -> . expression
    (50) argument_list -> . argument_list COMMA expression
    (51) argument_list -> . empty
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (56) empty -> .
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    RPAREN          reduce using rule 56 (empty -> .)
    COMMA           reduce using rule 56 (empty -> .)

    argument_list                  shift and go to state 57
    expression                     shift and go to state 58
    empty                          shift and go to state 59
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 30

    (54) lambda_call -> IDENTIFIER LBRACE . argument_list RBRACE
    (49) argument_list -> . expression
    (50) argument_list -> . argument_list COMMA expression
    (51) argument_list -> . empty
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (56) empty -> .
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    RBRACE          reduce using rule 56 (empty -> .)
    COMMA           reduce using rule 56 (empty -> .)

    argument_list                  shift and go to state 60
    expression                     shift and go to state 58
    empty                          shift and go to state 59
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 31

    (26) expression_statement -> expression SEMICOLON .

    IDENTIFIER      reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    ZAP             reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    COMMENT         reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 26 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 26 (expression_statement -> expression SEMICOLON .)


state 32

    (32) expression -> expression PLUS . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 61
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 33

    (33) expression -> expression MINUS . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 62
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 34

    (34) expression -> expression TIMES . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 63
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 35

    (35) expression -> expression DIVIDE . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 64
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 36

    (36) expression -> expression MODULO . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 65
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 37

    (37) expression -> expression GT . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 66
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 38

    (38) expression -> expression LT . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 67
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 39

    (39) expression -> expression GE . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 68
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 40

    (40) expression -> expression LE . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 69
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 41

    (41) expression -> expression EQ . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 70
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 42

    (42) expression -> expression NEQ . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 71
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 43

    (43) expression -> expression AND . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 72
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 44

    (44) expression -> expression OR . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 73
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 45

    (13) print_statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 74
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 46

    (31) expression -> LPAREN expression . RPAREN
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 47

    (28) expression -> IDENTIFIER .
    (55) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (54) lambda_call -> IDENTIFIER . LBRACE argument_list RBRACE

    RPAREN          reduce using rule 28 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 28 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 28 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 28 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 28 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 28 (expression -> IDENTIFIER .)
    GT              reduce using rule 28 (expression -> IDENTIFIER .)
    LT              reduce using rule 28 (expression -> IDENTIFIER .)
    GE              reduce using rule 28 (expression -> IDENTIFIER .)
    LE              reduce using rule 28 (expression -> IDENTIFIER .)
    EQ              reduce using rule 28 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 28 (expression -> IDENTIFIER .)
    AND             reduce using rule 28 (expression -> IDENTIFIER .)
    OR              reduce using rule 28 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 28 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 28 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 28 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 29
    LBRACE          shift and go to state 30


state 48

    (14) if_statement -> IF LPAREN . expression RPAREN block elseif_list else_block
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 76
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 49

    (21) function_definition -> ZAP IDENTIFIER . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 77


state 50

    (25) return_statement -> RETURN expression . SEMICOLON
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       shift and go to state 78
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 51

    (57) comment -> COMMENT IDENTIFIER .

    IDENTIFIER      reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    PRINT           reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    IF              reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    ZAP             reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    RETURN          reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    COMMENT         reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    NUMBER          reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    TRUE            reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    FALSE           reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    LPAREN          reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    NOT             reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    MINUS           reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    $end            reduce using rule 57 (comment -> COMMENT IDENTIFIER .)
    RBRACE          reduce using rule 57 (comment -> COMMENT IDENTIFIER .)


state 52

    (46) expression -> MINUS expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 46 (expression -> MINUS expression .)
    PLUS            reduce using rule 46 (expression -> MINUS expression .)
    MINUS           reduce using rule 46 (expression -> MINUS expression .)
    TIMES           reduce using rule 46 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 46 (expression -> MINUS expression .)
    MODULO          reduce using rule 46 (expression -> MINUS expression .)
    GT              reduce using rule 46 (expression -> MINUS expression .)
    LT              reduce using rule 46 (expression -> MINUS expression .)
    GE              reduce using rule 46 (expression -> MINUS expression .)
    LE              reduce using rule 46 (expression -> MINUS expression .)
    EQ              reduce using rule 46 (expression -> MINUS expression .)
    NEQ             reduce using rule 46 (expression -> MINUS expression .)
    AND             reduce using rule 46 (expression -> MINUS expression .)
    OR              reduce using rule 46 (expression -> MINUS expression .)
    RPAREN          reduce using rule 46 (expression -> MINUS expression .)
    COMMA           reduce using rule 46 (expression -> MINUS expression .)
    RBRACE          reduce using rule 46 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! MODULO          [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 53

    (45) expression -> NOT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 45 (expression -> NOT expression .)
    PLUS            reduce using rule 45 (expression -> NOT expression .)
    MINUS           reduce using rule 45 (expression -> NOT expression .)
    TIMES           reduce using rule 45 (expression -> NOT expression .)
    DIVIDE          reduce using rule 45 (expression -> NOT expression .)
    MODULO          reduce using rule 45 (expression -> NOT expression .)
    GT              reduce using rule 45 (expression -> NOT expression .)
    LT              reduce using rule 45 (expression -> NOT expression .)
    GE              reduce using rule 45 (expression -> NOT expression .)
    LE              reduce using rule 45 (expression -> NOT expression .)
    EQ              reduce using rule 45 (expression -> NOT expression .)
    NEQ             reduce using rule 45 (expression -> NOT expression .)
    AND             reduce using rule 45 (expression -> NOT expression .)
    OR              reduce using rule 45 (expression -> NOT expression .)
    RPAREN          reduce using rule 45 (expression -> NOT expression .)
    COMMA           reduce using rule 45 (expression -> NOT expression .)
    RBRACE          reduce using rule 45 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! MODULO          [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 54

    (12) assignment_statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       shift and go to state 79
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 55

    (52) lambda_expression -> IDENTIFIER ASSIGN anonymous_function . SEMICOLON

    SEMICOLON       shift and go to state 80


state 56

    (53) anonymous_function -> LAMBDA . LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    LPAREN          shift and go to state 81


state 57

    (55) function_call -> IDENTIFIER LPAREN argument_list . RPAREN
    (50) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 82
    COMMA           shift and go to state 83


state 58

    (49) argument_list -> expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          reduce using rule 49 (argument_list -> expression .)
    COMMA           reduce using rule 49 (argument_list -> expression .)
    RBRACE          reduce using rule 49 (argument_list -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 59

    (51) argument_list -> empty .

    RPAREN          reduce using rule 51 (argument_list -> empty .)
    COMMA           reduce using rule 51 (argument_list -> empty .)
    RBRACE          reduce using rule 51 (argument_list -> empty .)


state 60

    (54) lambda_call -> IDENTIFIER LBRACE argument_list . RBRACE
    (50) argument_list -> argument_list . COMMA expression

    RBRACE          shift and go to state 84
    COMMA           shift and go to state 83


state 61

    (32) expression -> expression PLUS expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 32 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 32 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 32 (expression -> expression PLUS expression .)
    GT              reduce using rule 32 (expression -> expression PLUS expression .)
    LT              reduce using rule 32 (expression -> expression PLUS expression .)
    GE              reduce using rule 32 (expression -> expression PLUS expression .)
    LE              reduce using rule 32 (expression -> expression PLUS expression .)
    EQ              reduce using rule 32 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 32 (expression -> expression PLUS expression .)
    AND             reduce using rule 32 (expression -> expression PLUS expression .)
    OR              reduce using rule 32 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 32 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 32 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 32 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! TIMES           [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 62

    (33) expression -> expression MINUS expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 33 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 33 (expression -> expression MINUS expression .)
    GT              reduce using rule 33 (expression -> expression MINUS expression .)
    LT              reduce using rule 33 (expression -> expression MINUS expression .)
    GE              reduce using rule 33 (expression -> expression MINUS expression .)
    LE              reduce using rule 33 (expression -> expression MINUS expression .)
    EQ              reduce using rule 33 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 33 (expression -> expression MINUS expression .)
    AND             reduce using rule 33 (expression -> expression MINUS expression .)
    OR              reduce using rule 33 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 33 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 33 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 33 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! TIMES           [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 63

    (34) expression -> expression TIMES expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 34 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 34 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 34 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 34 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 34 (expression -> expression TIMES expression .)
    GT              reduce using rule 34 (expression -> expression TIMES expression .)
    LT              reduce using rule 34 (expression -> expression TIMES expression .)
    GE              reduce using rule 34 (expression -> expression TIMES expression .)
    LE              reduce using rule 34 (expression -> expression TIMES expression .)
    EQ              reduce using rule 34 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 34 (expression -> expression TIMES expression .)
    AND             reduce using rule 34 (expression -> expression TIMES expression .)
    OR              reduce using rule 34 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 34 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 34 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 34 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! MODULO          [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 64

    (35) expression -> expression DIVIDE expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 35 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 35 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 35 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 35 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 35 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 35 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 35 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 35 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 35 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 35 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 35 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 35 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 35 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 35 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 35 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 35 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! MODULO          [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 65

    (36) expression -> expression MODULO expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 36 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 36 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 36 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 36 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 36 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 36 (expression -> expression MODULO expression .)
    GT              reduce using rule 36 (expression -> expression MODULO expression .)
    LT              reduce using rule 36 (expression -> expression MODULO expression .)
    GE              reduce using rule 36 (expression -> expression MODULO expression .)
    LE              reduce using rule 36 (expression -> expression MODULO expression .)
    EQ              reduce using rule 36 (expression -> expression MODULO expression .)
    NEQ             reduce using rule 36 (expression -> expression MODULO expression .)
    AND             reduce using rule 36 (expression -> expression MODULO expression .)
    OR              reduce using rule 36 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 36 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 36 (expression -> expression MODULO expression .)
    RBRACE          reduce using rule 36 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! MODULO          [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 66

    (37) expression -> expression GT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression GT expression .)
    GT              reduce using rule 37 (expression -> expression GT expression .)
    LT              reduce using rule 37 (expression -> expression GT expression .)
    GE              reduce using rule 37 (expression -> expression GT expression .)
    LE              reduce using rule 37 (expression -> expression GT expression .)
    EQ              reduce using rule 37 (expression -> expression GT expression .)
    NEQ             reduce using rule 37 (expression -> expression GT expression .)
    AND             reduce using rule 37 (expression -> expression GT expression .)
    OR              reduce using rule 37 (expression -> expression GT expression .)
    RPAREN          reduce using rule 37 (expression -> expression GT expression .)
    COMMA           reduce using rule 37 (expression -> expression GT expression .)
    RBRACE          reduce using rule 37 (expression -> expression GT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! PLUS            [ reduce using rule 37 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 67

    (38) expression -> expression LT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression LT expression .)
    GT              reduce using rule 38 (expression -> expression LT expression .)
    LT              reduce using rule 38 (expression -> expression LT expression .)
    GE              reduce using rule 38 (expression -> expression LT expression .)
    LE              reduce using rule 38 (expression -> expression LT expression .)
    EQ              reduce using rule 38 (expression -> expression LT expression .)
    NEQ             reduce using rule 38 (expression -> expression LT expression .)
    AND             reduce using rule 38 (expression -> expression LT expression .)
    OR              reduce using rule 38 (expression -> expression LT expression .)
    RPAREN          reduce using rule 38 (expression -> expression LT expression .)
    COMMA           reduce using rule 38 (expression -> expression LT expression .)
    RBRACE          reduce using rule 38 (expression -> expression LT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! PLUS            [ reduce using rule 38 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 38 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 68

    (39) expression -> expression GE expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression GE expression .)
    GT              reduce using rule 39 (expression -> expression GE expression .)
    LT              reduce using rule 39 (expression -> expression GE expression .)
    GE              reduce using rule 39 (expression -> expression GE expression .)
    LE              reduce using rule 39 (expression -> expression GE expression .)
    EQ              reduce using rule 39 (expression -> expression GE expression .)
    NEQ             reduce using rule 39 (expression -> expression GE expression .)
    AND             reduce using rule 39 (expression -> expression GE expression .)
    OR              reduce using rule 39 (expression -> expression GE expression .)
    RPAREN          reduce using rule 39 (expression -> expression GE expression .)
    COMMA           reduce using rule 39 (expression -> expression GE expression .)
    RBRACE          reduce using rule 39 (expression -> expression GE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! PLUS            [ reduce using rule 39 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 39 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 69

    (40) expression -> expression LE expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression LE expression .)
    GT              reduce using rule 40 (expression -> expression LE expression .)
    LT              reduce using rule 40 (expression -> expression LE expression .)
    GE              reduce using rule 40 (expression -> expression LE expression .)
    LE              reduce using rule 40 (expression -> expression LE expression .)
    EQ              reduce using rule 40 (expression -> expression LE expression .)
    NEQ             reduce using rule 40 (expression -> expression LE expression .)
    AND             reduce using rule 40 (expression -> expression LE expression .)
    OR              reduce using rule 40 (expression -> expression LE expression .)
    RPAREN          reduce using rule 40 (expression -> expression LE expression .)
    COMMA           reduce using rule 40 (expression -> expression LE expression .)
    RBRACE          reduce using rule 40 (expression -> expression LE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36

  ! PLUS            [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GE              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 70

    (41) expression -> expression EQ expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression EQ expression .)
    EQ              reduce using rule 41 (expression -> expression EQ expression .)
    NEQ             reduce using rule 41 (expression -> expression EQ expression .)
    AND             reduce using rule 41 (expression -> expression EQ expression .)
    OR              reduce using rule 41 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 41 (expression -> expression EQ expression .)
    COMMA           reduce using rule 41 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 41 (expression -> expression EQ expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40

  ! PLUS            [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 71

    (42) expression -> expression NEQ expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression NEQ expression .)
    EQ              reduce using rule 42 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 42 (expression -> expression NEQ expression .)
    AND             reduce using rule 42 (expression -> expression NEQ expression .)
    OR              reduce using rule 42 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 42 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 42 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 42 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40

  ! PLUS            [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 42 (expression -> expression NEQ expression .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 72

    (43) expression -> expression AND expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression AND expression .)
    AND             reduce using rule 43 (expression -> expression AND expression .)
    OR              reduce using rule 43 (expression -> expression AND expression .)
    RPAREN          reduce using rule 43 (expression -> expression AND expression .)
    COMMA           reduce using rule 43 (expression -> expression AND expression .)
    RBRACE          reduce using rule 43 (expression -> expression AND expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42

  ! PLUS            [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 73

    (44) expression -> expression OR expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    SEMICOLON       reduce using rule 44 (expression -> expression OR expression .)
    OR              reduce using rule 44 (expression -> expression OR expression .)
    RPAREN          reduce using rule 44 (expression -> expression OR expression .)
    COMMA           reduce using rule 44 (expression -> expression OR expression .)
    RBRACE          reduce using rule 44 (expression -> expression OR expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43

  ! PLUS            [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 44 ]


state 74

    (13) print_statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          shift and go to state 85
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 75

    (31) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 31 (expression -> LPAREN expression RPAREN .)


state 76

    (14) if_statement -> IF LPAREN expression . RPAREN block elseif_list else_block
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          shift and go to state 86
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 77

    (21) function_definition -> ZAP IDENTIFIER LPAREN . parameter_list RPAREN block
    (22) parameter_list -> . IDENTIFIER
    (23) parameter_list -> . parameter_list COMMA IDENTIFIER
    (24) parameter_list -> . empty
    (56) empty -> .

    IDENTIFIER      shift and go to state 87
    RPAREN          reduce using rule 56 (empty -> .)
    COMMA           reduce using rule 56 (empty -> .)

    parameter_list                 shift and go to state 88
    empty                          shift and go to state 89

state 78

    (25) return_statement -> RETURN expression SEMICOLON .

    IDENTIFIER      reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    ZAP             reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    COMMENT         reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 25 (return_statement -> RETURN expression SEMICOLON .)


state 79

    (12) assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    ZAP             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 80

    (52) lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .

    IDENTIFIER      reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    PRINT           reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    IF              reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    ZAP             reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    RETURN          reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    COMMENT         reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    NUMBER          reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    TRUE            reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    FALSE           reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    LPAREN          reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    NOT             reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    MINUS           reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    $end            reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)
    RBRACE          reduce using rule 52 (lambda_expression -> IDENTIFIER ASSIGN anonymous_function SEMICOLON .)


state 81

    (53) anonymous_function -> LAMBDA LPAREN . parameter_list RPAREN COLON LBRACE expression RBRACE
    (22) parameter_list -> . IDENTIFIER
    (23) parameter_list -> . parameter_list COMMA IDENTIFIER
    (24) parameter_list -> . empty
    (56) empty -> .

    IDENTIFIER      shift and go to state 87
    RPAREN          reduce using rule 56 (empty -> .)
    COMMA           reduce using rule 56 (empty -> .)

    parameter_list                 shift and go to state 90
    empty                          shift and go to state 89

state 82

    (55) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MODULO          reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GT              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LT              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GE              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LE              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    EQ              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    AND             reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    OR              reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 55 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 83

    (50) argument_list -> argument_list COMMA . expression
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 91
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 84

    (54) lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .

    SEMICOLON       reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    PLUS            reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    MINUS           reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    TIMES           reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    DIVIDE          reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    MODULO          reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    GT              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    LT              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    GE              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    LE              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    EQ              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    NEQ             reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    AND             reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    OR              reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    RPAREN          reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    COMMA           reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)
    RBRACE          reduce using rule 54 (lambda_call -> IDENTIFIER LBRACE argument_list RBRACE .)


state 85

    (13) print_statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 92


state 86

    (14) if_statement -> IF LPAREN expression RPAREN . block elseif_list else_block
    (20) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 94

    block                          shift and go to state 93

state 87

    (22) parameter_list -> IDENTIFIER .

    RPAREN          reduce using rule 22 (parameter_list -> IDENTIFIER .)
    COMMA           reduce using rule 22 (parameter_list -> IDENTIFIER .)


state 88

    (21) function_definition -> ZAP IDENTIFIER LPAREN parameter_list . RPAREN block
    (23) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96


state 89

    (24) parameter_list -> empty .

    RPAREN          reduce using rule 24 (parameter_list -> empty .)
    COMMA           reduce using rule 24 (parameter_list -> empty .)


state 90

    (53) anonymous_function -> LAMBDA LPAREN parameter_list . RPAREN COLON LBRACE expression RBRACE
    (23) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 96


state 91

    (50) argument_list -> argument_list COMMA expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          reduce using rule 50 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 50 (argument_list -> argument_list COMMA expression .)
    RBRACE          reduce using rule 50 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 92

    (13) print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ZAP             reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    COMMENT         reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 13 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 93

    (14) if_statement -> IF LPAREN expression RPAREN block . elseif_list else_block
    (15) elseif_list -> . elseif_list elseif
    (16) elseif_list -> . empty
    (56) empty -> .

    ELSE            reduce using rule 56 (empty -> .)
    ELSEIF          reduce using rule 56 (empty -> .)
    IDENTIFIER      reduce using rule 56 (empty -> .)
    PRINT           reduce using rule 56 (empty -> .)
    IF              reduce using rule 56 (empty -> .)
    ZAP             reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    COMMENT         reduce using rule 56 (empty -> .)
    NUMBER          reduce using rule 56 (empty -> .)
    TRUE            reduce using rule 56 (empty -> .)
    FALSE           reduce using rule 56 (empty -> .)
    LPAREN          reduce using rule 56 (empty -> .)
    NOT             reduce using rule 56 (empty -> .)
    MINUS           reduce using rule 56 (empty -> .)
    $end            reduce using rule 56 (empty -> .)
    RBRACE          reduce using rule 56 (empty -> .)

    elseif_list                    shift and go to state 98
    empty                          shift and go to state 99

state 94

    (20) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (14) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (21) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (25) return_statement -> . RETURN expression SEMICOLON
    (26) expression_statement -> . expression SEMICOLON
    (52) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (57) comment -> . COMMENT IDENTIFIER
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 14
    IF              shift and go to state 16
    ZAP             shift and go to state 17
    RETURN          shift and go to state 18
    COMMENT         shift and go to state 19
    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    statement_list                 shift and go to state 100
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 95

    (21) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN . block
    (20) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 94

    block                          shift and go to state 101

state 96

    (23) parameter_list -> parameter_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 102


state 97

    (53) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN . COLON LBRACE expression RBRACE

    COLON           shift and go to state 103


state 98

    (14) if_statement -> IF LPAREN expression RPAREN block elseif_list . else_block
    (15) elseif_list -> elseif_list . elseif
    (18) else_block -> . ELSE block
    (19) else_block -> . empty
    (17) elseif -> . ELSEIF LPAREN expression RPAREN block
    (56) empty -> .

    ELSE            shift and go to state 106
    ELSEIF          shift and go to state 108
    IDENTIFIER      reduce using rule 56 (empty -> .)
    PRINT           reduce using rule 56 (empty -> .)
    IF              reduce using rule 56 (empty -> .)
    ZAP             reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    COMMENT         reduce using rule 56 (empty -> .)
    NUMBER          reduce using rule 56 (empty -> .)
    TRUE            reduce using rule 56 (empty -> .)
    FALSE           reduce using rule 56 (empty -> .)
    LPAREN          reduce using rule 56 (empty -> .)
    NOT             reduce using rule 56 (empty -> .)
    MINUS           reduce using rule 56 (empty -> .)
    $end            reduce using rule 56 (empty -> .)
    RBRACE          reduce using rule 56 (empty -> .)

    else_block                     shift and go to state 104
    elseif                         shift and go to state 105
    empty                          shift and go to state 107

state 99

    (16) elseif_list -> empty .

    ELSE            reduce using rule 16 (elseif_list -> empty .)
    ELSEIF          reduce using rule 16 (elseif_list -> empty .)
    IDENTIFIER      reduce using rule 16 (elseif_list -> empty .)
    PRINT           reduce using rule 16 (elseif_list -> empty .)
    IF              reduce using rule 16 (elseif_list -> empty .)
    ZAP             reduce using rule 16 (elseif_list -> empty .)
    RETURN          reduce using rule 16 (elseif_list -> empty .)
    COMMENT         reduce using rule 16 (elseif_list -> empty .)
    NUMBER          reduce using rule 16 (elseif_list -> empty .)
    TRUE            reduce using rule 16 (elseif_list -> empty .)
    FALSE           reduce using rule 16 (elseif_list -> empty .)
    LPAREN          reduce using rule 16 (elseif_list -> empty .)
    NOT             reduce using rule 16 (elseif_list -> empty .)
    MINUS           reduce using rule 16 (elseif_list -> empty .)
    $end            reduce using rule 16 (elseif_list -> empty .)
    RBRACE          reduce using rule 16 (elseif_list -> empty .)


state 100

    (20) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) statement -> . lambda_expression
    (11) statement -> . comment
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (14) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (21) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (25) return_statement -> . RETURN expression SEMICOLON
    (26) expression_statement -> . expression SEMICOLON
    (52) lambda_expression -> . IDENTIFIER ASSIGN anonymous_function SEMICOLON
    (57) comment -> . COMMENT IDENTIFIER
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    RBRACE          shift and go to state 109
    IDENTIFIER      shift and go to state 12
    PRINT           shift and go to state 14
    IF              shift and go to state 16
    ZAP             shift and go to state 17
    RETURN          shift and go to state 18
    COMMENT         shift and go to state 19
    NUMBER          shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    statement                      shift and go to state 27
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    lambda_expression              shift and go to state 10
    comment                        shift and go to state 11
    expression                     shift and go to state 13
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 101

    (21) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .

    IDENTIFIER      reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    PRINT           reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    IF              reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    ZAP             reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RETURN          reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    COMMENT         reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NUMBER          reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    TRUE            reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    FALSE           reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    LPAREN          reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NOT             reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    MINUS           reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    $end            reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RBRACE          reduce using rule 21 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)


state 102

    (23) parameter_list -> parameter_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 23 (parameter_list -> parameter_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 23 (parameter_list -> parameter_list COMMA IDENTIFIER .)


state 103

    (53) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON . LBRACE expression RBRACE

    LBRACE          shift and go to state 110


state 104

    (14) if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .

    IDENTIFIER      reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    PRINT           reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    IF              reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    ZAP             reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RETURN          reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    COMMENT         reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NUMBER          reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    TRUE            reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    FALSE           reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    LPAREN          reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NOT             reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    MINUS           reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    $end            reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RBRACE          reduce using rule 14 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)


state 105

    (15) elseif_list -> elseif_list elseif .

    ELSE            reduce using rule 15 (elseif_list -> elseif_list elseif .)
    ELSEIF          reduce using rule 15 (elseif_list -> elseif_list elseif .)
    IDENTIFIER      reduce using rule 15 (elseif_list -> elseif_list elseif .)
    PRINT           reduce using rule 15 (elseif_list -> elseif_list elseif .)
    IF              reduce using rule 15 (elseif_list -> elseif_list elseif .)
    ZAP             reduce using rule 15 (elseif_list -> elseif_list elseif .)
    RETURN          reduce using rule 15 (elseif_list -> elseif_list elseif .)
    COMMENT         reduce using rule 15 (elseif_list -> elseif_list elseif .)
    NUMBER          reduce using rule 15 (elseif_list -> elseif_list elseif .)
    TRUE            reduce using rule 15 (elseif_list -> elseif_list elseif .)
    FALSE           reduce using rule 15 (elseif_list -> elseif_list elseif .)
    LPAREN          reduce using rule 15 (elseif_list -> elseif_list elseif .)
    NOT             reduce using rule 15 (elseif_list -> elseif_list elseif .)
    MINUS           reduce using rule 15 (elseif_list -> elseif_list elseif .)
    $end            reduce using rule 15 (elseif_list -> elseif_list elseif .)
    RBRACE          reduce using rule 15 (elseif_list -> elseif_list elseif .)


state 106

    (18) else_block -> ELSE . block
    (20) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 94

    block                          shift and go to state 111

state 107

    (19) else_block -> empty .

    IDENTIFIER      reduce using rule 19 (else_block -> empty .)
    PRINT           reduce using rule 19 (else_block -> empty .)
    IF              reduce using rule 19 (else_block -> empty .)
    ZAP             reduce using rule 19 (else_block -> empty .)
    RETURN          reduce using rule 19 (else_block -> empty .)
    COMMENT         reduce using rule 19 (else_block -> empty .)
    NUMBER          reduce using rule 19 (else_block -> empty .)
    TRUE            reduce using rule 19 (else_block -> empty .)
    FALSE           reduce using rule 19 (else_block -> empty .)
    LPAREN          reduce using rule 19 (else_block -> empty .)
    NOT             reduce using rule 19 (else_block -> empty .)
    MINUS           reduce using rule 19 (else_block -> empty .)
    $end            reduce using rule 19 (else_block -> empty .)
    RBRACE          reduce using rule 19 (else_block -> empty .)


state 108

    (17) elseif -> ELSEIF . LPAREN expression RPAREN block

    LPAREN          shift and go to state 112


state 109

    (20) block -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    ELSEIF          reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    ZAP             reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    COMMENT         reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 20 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 20 (block -> LBRACE statement_list RBRACE .)


state 110

    (53) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE . expression RBRACE
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 113
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 111

    (18) else_block -> ELSE block .

    IDENTIFIER      reduce using rule 18 (else_block -> ELSE block .)
    PRINT           reduce using rule 18 (else_block -> ELSE block .)
    IF              reduce using rule 18 (else_block -> ELSE block .)
    ZAP             reduce using rule 18 (else_block -> ELSE block .)
    RETURN          reduce using rule 18 (else_block -> ELSE block .)
    COMMENT         reduce using rule 18 (else_block -> ELSE block .)
    NUMBER          reduce using rule 18 (else_block -> ELSE block .)
    TRUE            reduce using rule 18 (else_block -> ELSE block .)
    FALSE           reduce using rule 18 (else_block -> ELSE block .)
    LPAREN          reduce using rule 18 (else_block -> ELSE block .)
    NOT             reduce using rule 18 (else_block -> ELSE block .)
    MINUS           reduce using rule 18 (else_block -> ELSE block .)
    $end            reduce using rule 18 (else_block -> ELSE block .)
    RBRACE          reduce using rule 18 (else_block -> ELSE block .)


state 112

    (17) elseif -> ELSEIF LPAREN . expression RPAREN block
    (27) expression -> . NUMBER
    (28) expression -> . IDENTIFIER
    (29) expression -> . TRUE
    (30) expression -> . FALSE
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression TIMES expression
    (35) expression -> . expression DIVIDE expression
    (36) expression -> . expression MODULO expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LT expression
    (39) expression -> . expression GE expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression EQ expression
    (42) expression -> . expression NEQ expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . function_call
    (48) expression -> . lambda_call
    (55) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (54) lambda_call -> . IDENTIFIER LBRACE argument_list RBRACE

    NUMBER          shift and go to state 20
    IDENTIFIER      shift and go to state 47
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23

    expression                     shift and go to state 114
    function_call                  shift and go to state 25
    lambda_call                    shift and go to state 26

state 113

    (53) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression . RBRACE
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RBRACE          shift and go to state 115
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 114

    (17) elseif -> ELSEIF LPAREN expression . RPAREN block
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . TIMES expression
    (35) expression -> expression . DIVIDE expression
    (36) expression -> expression . MODULO expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LT expression
    (39) expression -> expression . GE expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . EQ expression
    (42) expression -> expression . NEQ expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MODULO          shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 115

    (53) anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .

    SEMICOLON       reduce using rule 53 (anonymous_function -> LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)


state 116

    (17) elseif -> ELSEIF LPAREN expression RPAREN . block
    (20) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 94

    block                          shift and go to state 117

state 117

    (17) elseif -> ELSEIF LPAREN expression RPAREN block .

    ELSE            reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ELSEIF          reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IDENTIFIER      reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    PRINT           reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IF              reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ZAP             reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    COMMENT         reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NUMBER          reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    TRUE            reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    FALSE           reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NOT             reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    MINUS           reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    $end            reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 17 (elseif -> ELSEIF LPAREN expression RPAREN block .)

