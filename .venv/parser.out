Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> function_definition
Rule 8     statement -> return_statement
Rule 9     statement -> expression_statement
Rule 10    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 11    print_statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 12    if_statement -> IF LPAREN expression RPAREN block elseif_list else_block
Rule 13    elseif_list -> elseif
Rule 14    elseif_list -> elseif_list elseif
Rule 15    elseif_list -> empty
Rule 16    elseif -> ELSEIF LPAREN expression RPAREN block
Rule 17    else_block -> ELSE block
Rule 18    else_block -> empty
Rule 19    block -> LBRACE statement_list RBRACE
Rule 20    function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block
Rule 21    parameter_list -> IDENTIFIER
Rule 22    parameter_list -> parameter_list COMMA IDENTIFIER
Rule 23    parameter_list -> empty
Rule 24    return_statement -> RETURN expression SEMICOLON
Rule 25    expression_statement -> expression SEMICOLON
Rule 26    expression -> NUMBER
Rule 27    expression -> IDENTIFIER
Rule 28    expression -> TRUE
Rule 29    expression -> FALSE
Rule 30    expression -> LPAREN expression RPAREN
Rule 31    expression -> expression PLUS expression
Rule 32    expression -> expression MINUS expression
Rule 33    expression -> expression TIMES expression
Rule 34    expression -> expression DIVIDE expression
Rule 35    expression -> expression MODULO expression
Rule 36    expression -> expression GT expression
Rule 37    expression -> expression LT expression
Rule 38    expression -> expression GE expression
Rule 39    expression -> expression LE expression
Rule 40    expression -> expression EQ expression
Rule 41    expression -> expression NEQ expression
Rule 42    expression -> expression AND expression
Rule 43    expression -> expression OR expression
Rule 44    expression -> NOT expression
Rule 45    expression -> MINUS expression
Rule 46    expression -> function_call
Rule 47    expression -> lambda_expression
Rule 48    argument_list -> expression
Rule 49    argument_list -> argument_list COMMA expression
Rule 50    argument_list -> empty
Rule 51    lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
Rule 52    function_call -> IDENTIFIER LPAREN argument_list RPAREN
Rule 53    empty -> <empty>

Terminals, with rules where they appear

AND                  : 42
ASSIGN               : 10 51
COLON                : 51
COMMA                : 22 49
DIVIDE               : 34
ELSE                 : 17
ELSEIF               : 16
EQ                   : 40
FALSE                : 29
GE                   : 38
GT                   : 36
IDENTIFIER           : 10 20 21 22 27 51 52
IF                   : 12
LAMBDA               : 51
LBRACE               : 19 51
LE                   : 39
LPAREN               : 11 12 16 20 30 51 52
LT                   : 37
MINUS                : 32 45
MODULO               : 35
NEQ                  : 41
NOT                  : 44
NUMBER               : 26
OR                   : 43
PLUS                 : 31
PRINT                : 11
RBRACE               : 19 51
RETURN               : 24
RPAREN               : 11 12 16 20 30 51 52
SEMICOLON            : 10 11 24 25
TIMES                : 33
TRUE                 : 28
ZAP                  : 20
error                : 

Nonterminals, with rules where they appear

argument_list        : 49 52
assignment_statement : 4
block                : 12 16 17 20
else_block           : 12
elseif               : 13 14
elseif_list          : 12 14
empty                : 15 18 23 50
expression           : 10 11 12 16 24 25 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 45 48 49 51
expression_statement : 9
function_call        : 46
function_definition  : 7
if_statement         : 6
lambda_expression    : 47
parameter_list       : 20 22 51
print_statement      : 5
program              : 0
return_statement     : 8
statement            : 2 3
statement_list       : 1 3 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (11) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (12) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (20) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (24) return_statement -> . RETURN expression SEMICOLON
    (25) expression_statement -> . expression SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    IDENTIFIER      shift and go to state 10
    PRINT           shift and go to state 12
    IF              shift and go to state 14
    ZAP             shift and go to state 15
    RETURN          shift and go to state 16
    NUMBER          shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    expression                     shift and go to state 11
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (11) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (12) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (20) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (24) return_statement -> . RETURN expression SEMICOLON
    (25) expression_statement -> . expression SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 10
    PRINT           shift and go to state 12
    IF              shift and go to state 14
    ZAP             shift and go to state 15
    RETURN          shift and go to state 16
    NUMBER          shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    statement                      shift and go to state 24
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    expression                     shift and go to state 11
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    ZAP             reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    NOT             reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment_statement .

    IDENTIFIER      reduce using rule 4 (statement -> assignment_statement .)
    PRINT           reduce using rule 4 (statement -> assignment_statement .)
    IF              reduce using rule 4 (statement -> assignment_statement .)
    ZAP             reduce using rule 4 (statement -> assignment_statement .)
    RETURN          reduce using rule 4 (statement -> assignment_statement .)
    NUMBER          reduce using rule 4 (statement -> assignment_statement .)
    TRUE            reduce using rule 4 (statement -> assignment_statement .)
    FALSE           reduce using rule 4 (statement -> assignment_statement .)
    LPAREN          reduce using rule 4 (statement -> assignment_statement .)
    NOT             reduce using rule 4 (statement -> assignment_statement .)
    MINUS           reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)
    RBRACE          reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> print_statement .

    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    ZAP             reduce using rule 5 (statement -> print_statement .)
    RETURN          reduce using rule 5 (statement -> print_statement .)
    NUMBER          reduce using rule 5 (statement -> print_statement .)
    TRUE            reduce using rule 5 (statement -> print_statement .)
    FALSE           reduce using rule 5 (statement -> print_statement .)
    LPAREN          reduce using rule 5 (statement -> print_statement .)
    NOT             reduce using rule 5 (statement -> print_statement .)
    MINUS           reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    ZAP             reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> function_definition .

    IDENTIFIER      reduce using rule 7 (statement -> function_definition .)
    PRINT           reduce using rule 7 (statement -> function_definition .)
    IF              reduce using rule 7 (statement -> function_definition .)
    ZAP             reduce using rule 7 (statement -> function_definition .)
    RETURN          reduce using rule 7 (statement -> function_definition .)
    NUMBER          reduce using rule 7 (statement -> function_definition .)
    TRUE            reduce using rule 7 (statement -> function_definition .)
    FALSE           reduce using rule 7 (statement -> function_definition .)
    LPAREN          reduce using rule 7 (statement -> function_definition .)
    NOT             reduce using rule 7 (statement -> function_definition .)
    MINUS           reduce using rule 7 (statement -> function_definition .)
    $end            reduce using rule 7 (statement -> function_definition .)
    RBRACE          reduce using rule 7 (statement -> function_definition .)


state 8

    (8) statement -> return_statement .

    IDENTIFIER      reduce using rule 8 (statement -> return_statement .)
    PRINT           reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    ZAP             reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    NUMBER          reduce using rule 8 (statement -> return_statement .)
    TRUE            reduce using rule 8 (statement -> return_statement .)
    FALSE           reduce using rule 8 (statement -> return_statement .)
    LPAREN          reduce using rule 8 (statement -> return_statement .)
    NOT             reduce using rule 8 (statement -> return_statement .)
    MINUS           reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> expression_statement .

    IDENTIFIER      reduce using rule 9 (statement -> expression_statement .)
    PRINT           reduce using rule 9 (statement -> expression_statement .)
    IF              reduce using rule 9 (statement -> expression_statement .)
    ZAP             reduce using rule 9 (statement -> expression_statement .)
    RETURN          reduce using rule 9 (statement -> expression_statement .)
    NUMBER          reduce using rule 9 (statement -> expression_statement .)
    TRUE            reduce using rule 9 (statement -> expression_statement .)
    FALSE           reduce using rule 9 (statement -> expression_statement .)
    LPAREN          reduce using rule 9 (statement -> expression_statement .)
    NOT             reduce using rule 9 (statement -> expression_statement .)
    MINUS           reduce using rule 9 (statement -> expression_statement .)
    $end            reduce using rule 9 (statement -> expression_statement .)
    RBRACE          reduce using rule 9 (statement -> expression_statement .)


state 10

    (10) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (27) expression -> IDENTIFIER .
    (52) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (51) lambda_expression -> IDENTIFIER . ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    ASSIGN          shift and go to state 25
    SEMICOLON       reduce using rule 27 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 27 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 27 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 27 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 27 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 27 (expression -> IDENTIFIER .)
    GT              reduce using rule 27 (expression -> IDENTIFIER .)
    LT              reduce using rule 27 (expression -> IDENTIFIER .)
    GE              reduce using rule 27 (expression -> IDENTIFIER .)
    LE              reduce using rule 27 (expression -> IDENTIFIER .)
    EQ              reduce using rule 27 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 27 (expression -> IDENTIFIER .)
    AND             reduce using rule 27 (expression -> IDENTIFIER .)
    OR              reduce using rule 27 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 26


state 11

    (25) expression_statement -> expression . SEMICOLON
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 12

    (11) print_statement -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 41


state 13

    (30) expression -> LPAREN . expression RPAREN
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 42
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 14

    (12) if_statement -> IF . LPAREN expression RPAREN block elseif_list else_block

    LPAREN          shift and go to state 44


state 15

    (20) function_definition -> ZAP . IDENTIFIER LPAREN parameter_list RPAREN block

    IDENTIFIER      shift and go to state 45


state 16

    (24) return_statement -> RETURN . expression SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 46
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 17

    (26) expression -> NUMBER .

    SEMICOLON       reduce using rule 26 (expression -> NUMBER .)
    PLUS            reduce using rule 26 (expression -> NUMBER .)
    MINUS           reduce using rule 26 (expression -> NUMBER .)
    TIMES           reduce using rule 26 (expression -> NUMBER .)
    DIVIDE          reduce using rule 26 (expression -> NUMBER .)
    MODULO          reduce using rule 26 (expression -> NUMBER .)
    GT              reduce using rule 26 (expression -> NUMBER .)
    LT              reduce using rule 26 (expression -> NUMBER .)
    GE              reduce using rule 26 (expression -> NUMBER .)
    LE              reduce using rule 26 (expression -> NUMBER .)
    EQ              reduce using rule 26 (expression -> NUMBER .)
    NEQ             reduce using rule 26 (expression -> NUMBER .)
    AND             reduce using rule 26 (expression -> NUMBER .)
    OR              reduce using rule 26 (expression -> NUMBER .)
    RPAREN          reduce using rule 26 (expression -> NUMBER .)
    COMMA           reduce using rule 26 (expression -> NUMBER .)
    RBRACE          reduce using rule 26 (expression -> NUMBER .)


state 18

    (28) expression -> TRUE .

    SEMICOLON       reduce using rule 28 (expression -> TRUE .)
    PLUS            reduce using rule 28 (expression -> TRUE .)
    MINUS           reduce using rule 28 (expression -> TRUE .)
    TIMES           reduce using rule 28 (expression -> TRUE .)
    DIVIDE          reduce using rule 28 (expression -> TRUE .)
    MODULO          reduce using rule 28 (expression -> TRUE .)
    GT              reduce using rule 28 (expression -> TRUE .)
    LT              reduce using rule 28 (expression -> TRUE .)
    GE              reduce using rule 28 (expression -> TRUE .)
    LE              reduce using rule 28 (expression -> TRUE .)
    EQ              reduce using rule 28 (expression -> TRUE .)
    NEQ             reduce using rule 28 (expression -> TRUE .)
    AND             reduce using rule 28 (expression -> TRUE .)
    OR              reduce using rule 28 (expression -> TRUE .)
    RPAREN          reduce using rule 28 (expression -> TRUE .)
    COMMA           reduce using rule 28 (expression -> TRUE .)
    RBRACE          reduce using rule 28 (expression -> TRUE .)


state 19

    (29) expression -> FALSE .

    SEMICOLON       reduce using rule 29 (expression -> FALSE .)
    PLUS            reduce using rule 29 (expression -> FALSE .)
    MINUS           reduce using rule 29 (expression -> FALSE .)
    TIMES           reduce using rule 29 (expression -> FALSE .)
    DIVIDE          reduce using rule 29 (expression -> FALSE .)
    MODULO          reduce using rule 29 (expression -> FALSE .)
    GT              reduce using rule 29 (expression -> FALSE .)
    LT              reduce using rule 29 (expression -> FALSE .)
    GE              reduce using rule 29 (expression -> FALSE .)
    LE              reduce using rule 29 (expression -> FALSE .)
    EQ              reduce using rule 29 (expression -> FALSE .)
    NEQ             reduce using rule 29 (expression -> FALSE .)
    AND             reduce using rule 29 (expression -> FALSE .)
    OR              reduce using rule 29 (expression -> FALSE .)
    RPAREN          reduce using rule 29 (expression -> FALSE .)
    COMMA           reduce using rule 29 (expression -> FALSE .)
    RBRACE          reduce using rule 29 (expression -> FALSE .)


state 20

    (45) expression -> MINUS . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 47
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 21

    (44) expression -> NOT . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 48
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 22

    (46) expression -> function_call .

    SEMICOLON       reduce using rule 46 (expression -> function_call .)
    PLUS            reduce using rule 46 (expression -> function_call .)
    MINUS           reduce using rule 46 (expression -> function_call .)
    TIMES           reduce using rule 46 (expression -> function_call .)
    DIVIDE          reduce using rule 46 (expression -> function_call .)
    MODULO          reduce using rule 46 (expression -> function_call .)
    GT              reduce using rule 46 (expression -> function_call .)
    LT              reduce using rule 46 (expression -> function_call .)
    GE              reduce using rule 46 (expression -> function_call .)
    LE              reduce using rule 46 (expression -> function_call .)
    EQ              reduce using rule 46 (expression -> function_call .)
    NEQ             reduce using rule 46 (expression -> function_call .)
    AND             reduce using rule 46 (expression -> function_call .)
    OR              reduce using rule 46 (expression -> function_call .)
    RPAREN          reduce using rule 46 (expression -> function_call .)
    COMMA           reduce using rule 46 (expression -> function_call .)
    RBRACE          reduce using rule 46 (expression -> function_call .)


state 23

    (47) expression -> lambda_expression .

    SEMICOLON       reduce using rule 47 (expression -> lambda_expression .)
    PLUS            reduce using rule 47 (expression -> lambda_expression .)
    MINUS           reduce using rule 47 (expression -> lambda_expression .)
    TIMES           reduce using rule 47 (expression -> lambda_expression .)
    DIVIDE          reduce using rule 47 (expression -> lambda_expression .)
    MODULO          reduce using rule 47 (expression -> lambda_expression .)
    GT              reduce using rule 47 (expression -> lambda_expression .)
    LT              reduce using rule 47 (expression -> lambda_expression .)
    GE              reduce using rule 47 (expression -> lambda_expression .)
    LE              reduce using rule 47 (expression -> lambda_expression .)
    EQ              reduce using rule 47 (expression -> lambda_expression .)
    NEQ             reduce using rule 47 (expression -> lambda_expression .)
    AND             reduce using rule 47 (expression -> lambda_expression .)
    OR              reduce using rule 47 (expression -> lambda_expression .)
    RPAREN          reduce using rule 47 (expression -> lambda_expression .)
    COMMA           reduce using rule 47 (expression -> lambda_expression .)
    RBRACE          reduce using rule 47 (expression -> lambda_expression .)


state 24

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    ZAP             reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 25

    (10) assignment_statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (51) lambda_expression -> IDENTIFIER ASSIGN . LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    LAMBDA          shift and go to state 50
    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 49
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 26

    (52) function_call -> IDENTIFIER LPAREN . argument_list RPAREN
    (48) argument_list -> . expression
    (49) argument_list -> . argument_list COMMA expression
    (50) argument_list -> . empty
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (53) empty -> .
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    RPAREN          reduce using rule 53 (empty -> .)
    COMMA           reduce using rule 53 (empty -> .)

    argument_list                  shift and go to state 51
    expression                     shift and go to state 52
    empty                          shift and go to state 53
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 27

    (25) expression_statement -> expression SEMICOLON .

    IDENTIFIER      reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    ZAP             reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 25 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 25 (expression_statement -> expression SEMICOLON .)


state 28

    (31) expression -> expression PLUS . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 54
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 29

    (32) expression -> expression MINUS . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 55
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 30

    (33) expression -> expression TIMES . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 56
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 31

    (34) expression -> expression DIVIDE . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 57
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 32

    (35) expression -> expression MODULO . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 58
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 33

    (36) expression -> expression GT . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 59
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 34

    (37) expression -> expression LT . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 60
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 35

    (38) expression -> expression GE . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 61
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 36

    (39) expression -> expression LE . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 62
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 37

    (40) expression -> expression EQ . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 63
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 38

    (41) expression -> expression NEQ . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 64
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 39

    (42) expression -> expression AND . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 65
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 40

    (43) expression -> expression OR . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 66
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 41

    (11) print_statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 67
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 42

    (30) expression -> LPAREN expression . RPAREN
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 68
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 43

    (27) expression -> IDENTIFIER .
    (52) function_call -> IDENTIFIER . LPAREN argument_list RPAREN
    (51) lambda_expression -> IDENTIFIER . ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    RPAREN          reduce using rule 27 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 27 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 27 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 27 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 27 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 27 (expression -> IDENTIFIER .)
    GT              reduce using rule 27 (expression -> IDENTIFIER .)
    LT              reduce using rule 27 (expression -> IDENTIFIER .)
    GE              reduce using rule 27 (expression -> IDENTIFIER .)
    LE              reduce using rule 27 (expression -> IDENTIFIER .)
    EQ              reduce using rule 27 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 27 (expression -> IDENTIFIER .)
    AND             reduce using rule 27 (expression -> IDENTIFIER .)
    OR              reduce using rule 27 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 27 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 27 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 27 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 26
    ASSIGN          shift and go to state 69


state 44

    (12) if_statement -> IF LPAREN . expression RPAREN block elseif_list else_block
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 70
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 45

    (20) function_definition -> ZAP IDENTIFIER . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 71


state 46

    (24) return_statement -> RETURN expression . SEMICOLON
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 72
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 47

    (45) expression -> MINUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 45 (expression -> MINUS expression .)
    PLUS            reduce using rule 45 (expression -> MINUS expression .)
    MINUS           reduce using rule 45 (expression -> MINUS expression .)
    TIMES           reduce using rule 45 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 45 (expression -> MINUS expression .)
    MODULO          reduce using rule 45 (expression -> MINUS expression .)
    GT              reduce using rule 45 (expression -> MINUS expression .)
    LT              reduce using rule 45 (expression -> MINUS expression .)
    GE              reduce using rule 45 (expression -> MINUS expression .)
    LE              reduce using rule 45 (expression -> MINUS expression .)
    EQ              reduce using rule 45 (expression -> MINUS expression .)
    NEQ             reduce using rule 45 (expression -> MINUS expression .)
    AND             reduce using rule 45 (expression -> MINUS expression .)
    OR              reduce using rule 45 (expression -> MINUS expression .)
    RPAREN          reduce using rule 45 (expression -> MINUS expression .)
    COMMA           reduce using rule 45 (expression -> MINUS expression .)
    RBRACE          reduce using rule 45 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 48

    (44) expression -> NOT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 44 (expression -> NOT expression .)
    PLUS            reduce using rule 44 (expression -> NOT expression .)
    MINUS           reduce using rule 44 (expression -> NOT expression .)
    TIMES           reduce using rule 44 (expression -> NOT expression .)
    DIVIDE          reduce using rule 44 (expression -> NOT expression .)
    MODULO          reduce using rule 44 (expression -> NOT expression .)
    GT              reduce using rule 44 (expression -> NOT expression .)
    LT              reduce using rule 44 (expression -> NOT expression .)
    GE              reduce using rule 44 (expression -> NOT expression .)
    LE              reduce using rule 44 (expression -> NOT expression .)
    EQ              reduce using rule 44 (expression -> NOT expression .)
    NEQ             reduce using rule 44 (expression -> NOT expression .)
    AND             reduce using rule 44 (expression -> NOT expression .)
    OR              reduce using rule 44 (expression -> NOT expression .)
    RPAREN          reduce using rule 44 (expression -> NOT expression .)
    COMMA           reduce using rule 44 (expression -> NOT expression .)
    RBRACE          reduce using rule 44 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 49

    (10) assignment_statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 73
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 50

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA . LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    LPAREN          shift and go to state 74


state 51

    (52) function_call -> IDENTIFIER LPAREN argument_list . RPAREN
    (49) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 75
    COMMA           shift and go to state 76


state 52

    (48) argument_list -> expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          reduce using rule 48 (argument_list -> expression .)
    COMMA           reduce using rule 48 (argument_list -> expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 53

    (50) argument_list -> empty .

    RPAREN          reduce using rule 50 (argument_list -> empty .)
    COMMA           reduce using rule 50 (argument_list -> empty .)


state 54

    (31) expression -> expression PLUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 31 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 31 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 31 (expression -> expression PLUS expression .)
    GT              reduce using rule 31 (expression -> expression PLUS expression .)
    LT              reduce using rule 31 (expression -> expression PLUS expression .)
    GE              reduce using rule 31 (expression -> expression PLUS expression .)
    LE              reduce using rule 31 (expression -> expression PLUS expression .)
    EQ              reduce using rule 31 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 31 (expression -> expression PLUS expression .)
    AND             reduce using rule 31 (expression -> expression PLUS expression .)
    OR              reduce using rule 31 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 31 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 31 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! TIMES           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 55

    (32) expression -> expression MINUS expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 32 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 32 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 32 (expression -> expression MINUS expression .)
    GT              reduce using rule 32 (expression -> expression MINUS expression .)
    LT              reduce using rule 32 (expression -> expression MINUS expression .)
    GE              reduce using rule 32 (expression -> expression MINUS expression .)
    LE              reduce using rule 32 (expression -> expression MINUS expression .)
    EQ              reduce using rule 32 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 32 (expression -> expression MINUS expression .)
    AND             reduce using rule 32 (expression -> expression MINUS expression .)
    OR              reduce using rule 32 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 32 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 32 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! TIMES           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 56

    (33) expression -> expression TIMES expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 33 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 33 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 33 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 33 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 33 (expression -> expression TIMES expression .)
    GT              reduce using rule 33 (expression -> expression TIMES expression .)
    LT              reduce using rule 33 (expression -> expression TIMES expression .)
    GE              reduce using rule 33 (expression -> expression TIMES expression .)
    LE              reduce using rule 33 (expression -> expression TIMES expression .)
    EQ              reduce using rule 33 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 33 (expression -> expression TIMES expression .)
    AND             reduce using rule 33 (expression -> expression TIMES expression .)
    OR              reduce using rule 33 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 33 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 33 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 33 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 57

    (34) expression -> expression DIVIDE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 34 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 34 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 34 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 34 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 34 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 34 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 34 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 34 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 34 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 34 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 34 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 34 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 34 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 34 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 34 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 34 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 58

    (35) expression -> expression MODULO expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 35 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 35 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 35 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 35 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 35 (expression -> expression MODULO expression .)
    GT              reduce using rule 35 (expression -> expression MODULO expression .)
    LT              reduce using rule 35 (expression -> expression MODULO expression .)
    GE              reduce using rule 35 (expression -> expression MODULO expression .)
    LE              reduce using rule 35 (expression -> expression MODULO expression .)
    EQ              reduce using rule 35 (expression -> expression MODULO expression .)
    NEQ             reduce using rule 35 (expression -> expression MODULO expression .)
    AND             reduce using rule 35 (expression -> expression MODULO expression .)
    OR              reduce using rule 35 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 35 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 35 (expression -> expression MODULO expression .)
    RBRACE          reduce using rule 35 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! MODULO          [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 59

    (36) expression -> expression GT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 36 (expression -> expression GT expression .)
    GT              reduce using rule 36 (expression -> expression GT expression .)
    LT              reduce using rule 36 (expression -> expression GT expression .)
    GE              reduce using rule 36 (expression -> expression GT expression .)
    LE              reduce using rule 36 (expression -> expression GT expression .)
    EQ              reduce using rule 36 (expression -> expression GT expression .)
    NEQ             reduce using rule 36 (expression -> expression GT expression .)
    AND             reduce using rule 36 (expression -> expression GT expression .)
    OR              reduce using rule 36 (expression -> expression GT expression .)
    RPAREN          reduce using rule 36 (expression -> expression GT expression .)
    COMMA           reduce using rule 36 (expression -> expression GT expression .)
    RBRACE          reduce using rule 36 (expression -> expression GT expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! PLUS            [ reduce using rule 36 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 60

    (37) expression -> expression LT expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression LT expression .)
    GT              reduce using rule 37 (expression -> expression LT expression .)
    LT              reduce using rule 37 (expression -> expression LT expression .)
    GE              reduce using rule 37 (expression -> expression LT expression .)
    LE              reduce using rule 37 (expression -> expression LT expression .)
    EQ              reduce using rule 37 (expression -> expression LT expression .)
    NEQ             reduce using rule 37 (expression -> expression LT expression .)
    AND             reduce using rule 37 (expression -> expression LT expression .)
    OR              reduce using rule 37 (expression -> expression LT expression .)
    RPAREN          reduce using rule 37 (expression -> expression LT expression .)
    COMMA           reduce using rule 37 (expression -> expression LT expression .)
    RBRACE          reduce using rule 37 (expression -> expression LT expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! PLUS            [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 61

    (38) expression -> expression GE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression GE expression .)
    GT              reduce using rule 38 (expression -> expression GE expression .)
    LT              reduce using rule 38 (expression -> expression GE expression .)
    GE              reduce using rule 38 (expression -> expression GE expression .)
    LE              reduce using rule 38 (expression -> expression GE expression .)
    EQ              reduce using rule 38 (expression -> expression GE expression .)
    NEQ             reduce using rule 38 (expression -> expression GE expression .)
    AND             reduce using rule 38 (expression -> expression GE expression .)
    OR              reduce using rule 38 (expression -> expression GE expression .)
    RPAREN          reduce using rule 38 (expression -> expression GE expression .)
    COMMA           reduce using rule 38 (expression -> expression GE expression .)
    RBRACE          reduce using rule 38 (expression -> expression GE expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! PLUS            [ reduce using rule 38 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 38 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 62

    (39) expression -> expression LE expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression LE expression .)
    GT              reduce using rule 39 (expression -> expression LE expression .)
    LT              reduce using rule 39 (expression -> expression LE expression .)
    GE              reduce using rule 39 (expression -> expression LE expression .)
    LE              reduce using rule 39 (expression -> expression LE expression .)
    EQ              reduce using rule 39 (expression -> expression LE expression .)
    NEQ             reduce using rule 39 (expression -> expression LE expression .)
    AND             reduce using rule 39 (expression -> expression LE expression .)
    OR              reduce using rule 39 (expression -> expression LE expression .)
    RPAREN          reduce using rule 39 (expression -> expression LE expression .)
    COMMA           reduce using rule 39 (expression -> expression LE expression .)
    RBRACE          reduce using rule 39 (expression -> expression LE expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

  ! PLUS            [ reduce using rule 39 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 39 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 33 ]
  ! LT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LE              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 63

    (40) expression -> expression EQ expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression EQ expression .)
    EQ              reduce using rule 40 (expression -> expression EQ expression .)
    NEQ             reduce using rule 40 (expression -> expression EQ expression .)
    AND             reduce using rule 40 (expression -> expression EQ expression .)
    OR              reduce using rule 40 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 40 (expression -> expression EQ expression .)
    COMMA           reduce using rule 40 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 40 (expression -> expression EQ expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36

  ! PLUS            [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 64

    (41) expression -> expression NEQ expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression NEQ expression .)
    EQ              reduce using rule 41 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 41 (expression -> expression NEQ expression .)
    AND             reduce using rule 41 (expression -> expression NEQ expression .)
    OR              reduce using rule 41 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 41 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 41 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 41 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36

  ! PLUS            [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! MODULO          [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 41 (expression -> expression NEQ expression .) ]
  ! EQ              [ shift and go to state 37 ]
  ! NEQ             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 65

    (42) expression -> expression AND expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression AND expression .)
    AND             reduce using rule 42 (expression -> expression AND expression .)
    OR              reduce using rule 42 (expression -> expression AND expression .)
    RPAREN          reduce using rule 42 (expression -> expression AND expression .)
    COMMA           reduce using rule 42 (expression -> expression AND expression .)
    RBRACE          reduce using rule 42 (expression -> expression AND expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38

  ! PLUS            [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 66

    (43) expression -> expression OR expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression OR expression .)
    OR              reduce using rule 43 (expression -> expression OR expression .)
    RPAREN          reduce using rule 43 (expression -> expression OR expression .)
    COMMA           reduce using rule 43 (expression -> expression OR expression .)
    RBRACE          reduce using rule 43 (expression -> expression OR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39

  ! PLUS            [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 40 ]


state 67

    (11) print_statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 77
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 68

    (30) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 30 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 30 (expression -> LPAREN expression RPAREN .)


state 69

    (51) lambda_expression -> IDENTIFIER ASSIGN . LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    LAMBDA          shift and go to state 50


state 70

    (12) if_statement -> IF LPAREN expression . RPAREN block elseif_list else_block
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 71

    (20) function_definition -> ZAP IDENTIFIER LPAREN . parameter_list RPAREN block
    (21) parameter_list -> . IDENTIFIER
    (22) parameter_list -> . parameter_list COMMA IDENTIFIER
    (23) parameter_list -> . empty
    (53) empty -> .

    IDENTIFIER      shift and go to state 79
    RPAREN          reduce using rule 53 (empty -> .)
    COMMA           reduce using rule 53 (empty -> .)

    parameter_list                 shift and go to state 80
    empty                          shift and go to state 81

state 72

    (24) return_statement -> RETURN expression SEMICOLON .

    IDENTIFIER      reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    ZAP             reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 24 (return_statement -> RETURN expression SEMICOLON .)


state 73

    (10) assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    ZAP             reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 10 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 74

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN . parameter_list RPAREN COLON LBRACE expression RBRACE
    (21) parameter_list -> . IDENTIFIER
    (22) parameter_list -> . parameter_list COMMA IDENTIFIER
    (23) parameter_list -> . empty
    (53) empty -> .

    IDENTIFIER      shift and go to state 79
    RPAREN          reduce using rule 53 (empty -> .)
    COMMA           reduce using rule 53 (empty -> .)

    parameter_list                 shift and go to state 82
    empty                          shift and go to state 81

state 75

    (52) function_call -> IDENTIFIER LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    MODULO          reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GT              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LT              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    GE              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    LE              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    EQ              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    AND             reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    OR              reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 52 (function_call -> IDENTIFIER LPAREN argument_list RPAREN .)


state 76

    (49) argument_list -> argument_list COMMA . expression
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 83
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 77

    (11) print_statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 84


state 78

    (12) if_statement -> IF LPAREN expression RPAREN . block elseif_list else_block
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 85

state 79

    (21) parameter_list -> IDENTIFIER .

    RPAREN          reduce using rule 21 (parameter_list -> IDENTIFIER .)
    COMMA           reduce using rule 21 (parameter_list -> IDENTIFIER .)


state 80

    (20) function_definition -> ZAP IDENTIFIER LPAREN parameter_list . RPAREN block
    (22) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 87
    COMMA           shift and go to state 88


state 81

    (23) parameter_list -> empty .

    RPAREN          reduce using rule 23 (parameter_list -> empty .)
    COMMA           reduce using rule 23 (parameter_list -> empty .)


state 82

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list . RPAREN COLON LBRACE expression RBRACE
    (22) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 89
    COMMA           shift and go to state 88


state 83

    (49) argument_list -> argument_list COMMA expression .
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          reduce using rule 49 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 49 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 84

    (11) print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ZAP             reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 11 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 85

    (12) if_statement -> IF LPAREN expression RPAREN block . elseif_list else_block
    (13) elseif_list -> . elseif
    (14) elseif_list -> . elseif_list elseif
    (15) elseif_list -> . empty
    (16) elseif -> . ELSEIF LPAREN expression RPAREN block
    (53) empty -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 93
    ELSE            reduce using rule 53 (empty -> .)
    IDENTIFIER      reduce using rule 53 (empty -> .)
    PRINT           reduce using rule 53 (empty -> .)
    IF              reduce using rule 53 (empty -> .)
    ZAP             reduce using rule 53 (empty -> .)
    RETURN          reduce using rule 53 (empty -> .)
    NUMBER          reduce using rule 53 (empty -> .)
    TRUE            reduce using rule 53 (empty -> .)
    FALSE           reduce using rule 53 (empty -> .)
    LPAREN          reduce using rule 53 (empty -> .)
    NOT             reduce using rule 53 (empty -> .)
    MINUS           reduce using rule 53 (empty -> .)
    $end            reduce using rule 53 (empty -> .)
    RBRACE          reduce using rule 53 (empty -> .)

  ! ELSEIF          [ reduce using rule 53 (empty -> .) ]

    elseif_list                    shift and go to state 90
    elseif                         shift and go to state 91
    empty                          shift and go to state 92

state 86

    (19) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (11) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (12) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (20) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (24) return_statement -> . RETURN expression SEMICOLON
    (25) expression_statement -> . expression SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    IDENTIFIER      shift and go to state 10
    PRINT           shift and go to state 12
    IF              shift and go to state 14
    ZAP             shift and go to state 15
    RETURN          shift and go to state 16
    NUMBER          shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    statement_list                 shift and go to state 94
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    expression                     shift and go to state 11
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 87

    (20) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN . block
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 95

state 88

    (22) parameter_list -> parameter_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 96


state 89

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN . COLON LBRACE expression RBRACE

    COLON           shift and go to state 97


state 90

    (12) if_statement -> IF LPAREN expression RPAREN block elseif_list . else_block
    (14) elseif_list -> elseif_list . elseif
    (17) else_block -> . ELSE block
    (18) else_block -> . empty
    (16) elseif -> . ELSEIF LPAREN expression RPAREN block
    (53) empty -> .

    ELSE            shift and go to state 100
    ELSEIF          shift and go to state 93
    IDENTIFIER      reduce using rule 53 (empty -> .)
    PRINT           reduce using rule 53 (empty -> .)
    IF              reduce using rule 53 (empty -> .)
    ZAP             reduce using rule 53 (empty -> .)
    RETURN          reduce using rule 53 (empty -> .)
    NUMBER          reduce using rule 53 (empty -> .)
    TRUE            reduce using rule 53 (empty -> .)
    FALSE           reduce using rule 53 (empty -> .)
    LPAREN          reduce using rule 53 (empty -> .)
    NOT             reduce using rule 53 (empty -> .)
    MINUS           reduce using rule 53 (empty -> .)
    $end            reduce using rule 53 (empty -> .)
    RBRACE          reduce using rule 53 (empty -> .)

    else_block                     shift and go to state 98
    elseif                         shift and go to state 99
    empty                          shift and go to state 101

state 91

    (13) elseif_list -> elseif .

    ELSE            reduce using rule 13 (elseif_list -> elseif .)
    ELSEIF          reduce using rule 13 (elseif_list -> elseif .)
    IDENTIFIER      reduce using rule 13 (elseif_list -> elseif .)
    PRINT           reduce using rule 13 (elseif_list -> elseif .)
    IF              reduce using rule 13 (elseif_list -> elseif .)
    ZAP             reduce using rule 13 (elseif_list -> elseif .)
    RETURN          reduce using rule 13 (elseif_list -> elseif .)
    NUMBER          reduce using rule 13 (elseif_list -> elseif .)
    TRUE            reduce using rule 13 (elseif_list -> elseif .)
    FALSE           reduce using rule 13 (elseif_list -> elseif .)
    LPAREN          reduce using rule 13 (elseif_list -> elseif .)
    NOT             reduce using rule 13 (elseif_list -> elseif .)
    MINUS           reduce using rule 13 (elseif_list -> elseif .)
    $end            reduce using rule 13 (elseif_list -> elseif .)
    RBRACE          reduce using rule 13 (elseif_list -> elseif .)


state 92

    (15) elseif_list -> empty .

    ELSE            reduce using rule 15 (elseif_list -> empty .)
    ELSEIF          reduce using rule 15 (elseif_list -> empty .)
    IDENTIFIER      reduce using rule 15 (elseif_list -> empty .)
    PRINT           reduce using rule 15 (elseif_list -> empty .)
    IF              reduce using rule 15 (elseif_list -> empty .)
    ZAP             reduce using rule 15 (elseif_list -> empty .)
    RETURN          reduce using rule 15 (elseif_list -> empty .)
    NUMBER          reduce using rule 15 (elseif_list -> empty .)
    TRUE            reduce using rule 15 (elseif_list -> empty .)
    FALSE           reduce using rule 15 (elseif_list -> empty .)
    LPAREN          reduce using rule 15 (elseif_list -> empty .)
    NOT             reduce using rule 15 (elseif_list -> empty .)
    MINUS           reduce using rule 15 (elseif_list -> empty .)
    $end            reduce using rule 15 (elseif_list -> empty .)
    RBRACE          reduce using rule 15 (elseif_list -> empty .)


state 93

    (16) elseif -> ELSEIF . LPAREN expression RPAREN block

    LPAREN          shift and go to state 102


state 94

    (19) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . function_definition
    (8) statement -> . return_statement
    (9) statement -> . expression_statement
    (10) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (11) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (12) if_statement -> . IF LPAREN expression RPAREN block elseif_list else_block
    (20) function_definition -> . ZAP IDENTIFIER LPAREN parameter_list RPAREN block
    (24) return_statement -> . RETURN expression SEMICOLON
    (25) expression_statement -> . expression SEMICOLON
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    RBRACE          shift and go to state 103
    IDENTIFIER      shift and go to state 10
    PRINT           shift and go to state 12
    IF              shift and go to state 14
    ZAP             shift and go to state 15
    RETURN          shift and go to state 16
    NUMBER          shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    statement                      shift and go to state 24
    assignment_statement           shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    function_definition            shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    expression                     shift and go to state 11
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 95

    (20) function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .

    IDENTIFIER      reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    PRINT           reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    IF              reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    ZAP             reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RETURN          reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NUMBER          reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    TRUE            reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    FALSE           reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    LPAREN          reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    NOT             reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    MINUS           reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    $end            reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)
    RBRACE          reduce using rule 20 (function_definition -> ZAP IDENTIFIER LPAREN parameter_list RPAREN block .)


state 96

    (22) parameter_list -> parameter_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 22 (parameter_list -> parameter_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 22 (parameter_list -> parameter_list COMMA IDENTIFIER .)


state 97

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON . LBRACE expression RBRACE

    LBRACE          shift and go to state 104


state 98

    (12) if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .

    IDENTIFIER      reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    PRINT           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    IF              reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    ZAP             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RETURN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NUMBER          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    TRUE            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    FALSE           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    LPAREN          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    NOT             reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    MINUS           reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    $end            reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)
    RBRACE          reduce using rule 12 (if_statement -> IF LPAREN expression RPAREN block elseif_list else_block .)


state 99

    (14) elseif_list -> elseif_list elseif .

    ELSE            reduce using rule 14 (elseif_list -> elseif_list elseif .)
    ELSEIF          reduce using rule 14 (elseif_list -> elseif_list elseif .)
    IDENTIFIER      reduce using rule 14 (elseif_list -> elseif_list elseif .)
    PRINT           reduce using rule 14 (elseif_list -> elseif_list elseif .)
    IF              reduce using rule 14 (elseif_list -> elseif_list elseif .)
    ZAP             reduce using rule 14 (elseif_list -> elseif_list elseif .)
    RETURN          reduce using rule 14 (elseif_list -> elseif_list elseif .)
    NUMBER          reduce using rule 14 (elseif_list -> elseif_list elseif .)
    TRUE            reduce using rule 14 (elseif_list -> elseif_list elseif .)
    FALSE           reduce using rule 14 (elseif_list -> elseif_list elseif .)
    LPAREN          reduce using rule 14 (elseif_list -> elseif_list elseif .)
    NOT             reduce using rule 14 (elseif_list -> elseif_list elseif .)
    MINUS           reduce using rule 14 (elseif_list -> elseif_list elseif .)
    $end            reduce using rule 14 (elseif_list -> elseif_list elseif .)
    RBRACE          reduce using rule 14 (elseif_list -> elseif_list elseif .)


state 100

    (17) else_block -> ELSE . block
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 105

state 101

    (18) else_block -> empty .

    IDENTIFIER      reduce using rule 18 (else_block -> empty .)
    PRINT           reduce using rule 18 (else_block -> empty .)
    IF              reduce using rule 18 (else_block -> empty .)
    ZAP             reduce using rule 18 (else_block -> empty .)
    RETURN          reduce using rule 18 (else_block -> empty .)
    NUMBER          reduce using rule 18 (else_block -> empty .)
    TRUE            reduce using rule 18 (else_block -> empty .)
    FALSE           reduce using rule 18 (else_block -> empty .)
    LPAREN          reduce using rule 18 (else_block -> empty .)
    NOT             reduce using rule 18 (else_block -> empty .)
    MINUS           reduce using rule 18 (else_block -> empty .)
    $end            reduce using rule 18 (else_block -> empty .)
    RBRACE          reduce using rule 18 (else_block -> empty .)


state 102

    (16) elseif -> ELSEIF LPAREN . expression RPAREN block
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 106
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 103

    (19) block -> LBRACE statement_list RBRACE .

    ELSEIF          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    ZAP             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)


state 104

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE . expression RBRACE
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . TRUE
    (29) expression -> . FALSE
    (30) expression -> . LPAREN expression RPAREN
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression TIMES expression
    (34) expression -> . expression DIVIDE expression
    (35) expression -> . expression MODULO expression
    (36) expression -> . expression GT expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression GE expression
    (39) expression -> . expression LE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression NEQ expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . NOT expression
    (45) expression -> . MINUS expression
    (46) expression -> . function_call
    (47) expression -> . lambda_expression
    (52) function_call -> . IDENTIFIER LPAREN argument_list RPAREN
    (51) lambda_expression -> . IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 43
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    LPAREN          shift and go to state 13
    NOT             shift and go to state 21
    MINUS           shift and go to state 20

    expression                     shift and go to state 107
    function_call                  shift and go to state 22
    lambda_expression              shift and go to state 23

state 105

    (17) else_block -> ELSE block .

    IDENTIFIER      reduce using rule 17 (else_block -> ELSE block .)
    PRINT           reduce using rule 17 (else_block -> ELSE block .)
    IF              reduce using rule 17 (else_block -> ELSE block .)
    ZAP             reduce using rule 17 (else_block -> ELSE block .)
    RETURN          reduce using rule 17 (else_block -> ELSE block .)
    NUMBER          reduce using rule 17 (else_block -> ELSE block .)
    TRUE            reduce using rule 17 (else_block -> ELSE block .)
    FALSE           reduce using rule 17 (else_block -> ELSE block .)
    LPAREN          reduce using rule 17 (else_block -> ELSE block .)
    NOT             reduce using rule 17 (else_block -> ELSE block .)
    MINUS           reduce using rule 17 (else_block -> ELSE block .)
    $end            reduce using rule 17 (else_block -> ELSE block .)
    RBRACE          reduce using rule 17 (else_block -> ELSE block .)


state 106

    (16) elseif -> ELSEIF LPAREN expression . RPAREN block
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 108
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 107

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression . RBRACE
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . TIMES expression
    (34) expression -> expression . DIVIDE expression
    (35) expression -> expression . MODULO expression
    (36) expression -> expression . GT expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . GE expression
    (39) expression -> expression . LE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . NEQ expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RBRACE          shift and go to state 109
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32
    GT              shift and go to state 33
    LT              shift and go to state 34
    GE              shift and go to state 35
    LE              shift and go to state 36
    EQ              shift and go to state 37
    NEQ             shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 108

    (16) elseif -> ELSEIF LPAREN expression RPAREN . block
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 110

state 109

    (51) lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .

    SEMICOLON       reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    PLUS            reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    MINUS           reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    TIMES           reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    MODULO          reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    GT              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    LT              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    GE              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    LE              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    EQ              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    NEQ             reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    AND             reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    OR              reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    RPAREN          reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    COMMA           reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)
    RBRACE          reduce using rule 51 (lambda_expression -> IDENTIFIER ASSIGN LAMBDA LPAREN parameter_list RPAREN COLON LBRACE expression RBRACE .)


state 110

    (16) elseif -> ELSEIF LPAREN expression RPAREN block .

    ELSE            reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ELSEIF          reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IDENTIFIER      reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    PRINT           reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    IF              reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    ZAP             reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NUMBER          reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    TRUE            reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    FALSE           reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    NOT             reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    MINUS           reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    $end            reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 16 (elseif -> ELSEIF LPAREN expression RPAREN block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 85 resolved as shift
